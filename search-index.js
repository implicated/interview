antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1",[0,18.354,1,12.842]],["name/1",[2,1.391]],["text/1",[3,0.727,4,2.159,5,2.905,6,2.905,7,2.905,8,1.583,9,3.909,10,2.905,11,2.558,12,2.558,13,2.159,14,2.905,15,2.905,16,2.905,17,2.905,18,2.905,19,2.558,20,2.905,21,2.905,22,2.022]],["component/1",[1,0.6]],["title/2",[9,44.7]],["name/2",[2,1.391]],["text/2",[]],["component/2",[1,0.6]],["title/3",[11,44.7]],["name/3",[2,1.391]],["text/3",[]],["component/3",[1,0.6]],["title/4",[3,6.118]],["name/4",[23,1.318,24,1.318]],["text/4",[3,0.921]],["component/4",[1,0.6]],["title/5-1",[3,6.118]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[25,37.723]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5",[3,6.118]],["name/5",[2,1.391]],["text/5",[2,1.858,3,0.948,26,2.074,27,2.979,28,2.979,29,2.979,30,2.979,31,2.979,32,4.525,33,2.979,34,2.623,35,2.979]],["component/5",[1,0.6]],["title/6-1",[3,6.118]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[36,27.214,37,39.09]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[36,27.214,38,39.09]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[2,19.822,39,31.782,40,25.486]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[8,21.304,36,27.214]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[3,6.118]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[41,30.174]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[41,23.235,42,34.421]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[41,15.916,43,26.776,44,26.776,45,23.578]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6-10",[41,23.235,46,34.421]],["name/6-10",[]],["text/6-10",[]],["component/6-10",[]],["title/6-11",[41,23.235,47,29.049]],["name/6-11",[]],["text/6-11",[]],["component/6-11",[]],["title/6-12",[41,23.235,48,31.346]],["name/6-12",[]],["text/6-12",[]],["component/6-12",[]],["title/6-13",[41,18.892,48,25.486,49,31.782]],["name/6-13",[]],["text/6-13",[]],["component/6-13",[]],["title/6-14",[41,18.892,48,25.486,50,31.782]],["name/6-14",[]],["text/6-14",[]],["component/6-14",[]],["title/6-15",[36,27.214,51,39.09]],["name/6-15",[]],["text/6-15",[]],["component/6-15",[]],["title/6-16",[8,21.304,52,31.346]],["name/6-16",[]],["text/6-16",[]],["component/6-16",[]],["title/6-17",[8,21.304,47,29.049]],["name/6-17",[]],["text/6-17",[]],["component/6-17",[]],["title/6",[53,35.341]],["name/6",[53,1.553]],["text/6",[3,0.906,8,1.705,40,1.504,47,2.324,52,1.504,53,3.268,54,1.394,55,1.306,56,1.652,57,1.652,58,1.652,59,1.876,60,1.876,61,1.876,62,1.876,63,1.876,64,1.876,65,1.876,66,1.876,67,1.652,68,1.876,69,1.876,70,1.876,71,1.876,72,1.876,73,1.876]],["component/6",[1,0.6]],["title/7-1",[8,21.304,34,34.421]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[8,21.304,47,29.049]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7-3",[74,44.7]],["name/7-3",[]],["text/7-3",[]],["component/7-3",[]],["title/7",[8,27.666]],["name/7",[8,1.216]],["text/7",[3,0.875,8,2.515,25,2.272,26,2.129,52,3.701,53,2.129,74,4.895,75,2.692,76,3.057,77,3.057,78,3.057,79,3.057]],["component/7",[1,0.6]],["title/8-1",[3,6.118]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[3,6.118]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[80,50.763]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8",[26,35.341]],["name/8",[26,1.553]],["text/8",[3,0.98,25,3.509,26,3.539,36,0.942,53,0.942,75,2.775,81,1.353,82,1.353,83,1.353,84,1.191,85,1.353,86,1.353,87,1.353,88,1.353,89,1.353,90,1.353,91,1.353,92,1.353,93,1.758]],["component/8",[1,0.6]],["title/9-1",[94,50.763]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[56,44.7]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9-3",[57,44.7]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["title/9-4",[58,44.7]],["name/9-4",[]],["text/9-4",[]],["component/9-4",[]],["title/9",[3,4.712,25,29.049]],["name/9",[95,2.231]],["text/9",[]],["component/9",[1,0.6]],["title/10-1",[3,6.118]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[67,44.7]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[3,6.118]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10-4",[96,44.7]],["name/10-4",[]],["text/10-4",[]],["component/10-4",[]],["title/10-5",[97,44.7]],["name/10-5",[]],["text/10-5",[]],["component/10-5",[]],["title/10-6",[3,6.118]],["name/10-6",[]],["text/10-6",[]],["component/10-6",[]],["title/10-7",[3,6.118]],["name/10-7",[]],["text/10-7",[]],["component/10-7",[]],["title/10-8",[3,4.712,4,29.049]],["name/10-8",[]],["text/10-8",[]],["component/10-8",[]],["title/10-9",[3,6.118]],["name/10-9",[]],["text/10-9",[]],["component/10-9",[]],["title/10-10",[3,6.118]],["name/10-10",[]],["text/10-10",[]],["component/10-10",[]],["title/10-11",[3,6.118]],["name/10-11",[]],["text/10-11",[]],["component/10-11",[]],["title/10-12",[3,6.118]],["name/10-12",[]],["text/10-12",[]],["component/10-12",[]],["title/10",[4,37.723]],["name/10",[2,1.391]],["text/10",[3,0.975,4,2.818,12,1.633,40,0.436,96,4.46,97,3.513,98,0.544,99,0.544,100,0.544,101,0.544,102,0.544,103,0.544,104,0.544,105,0.544,106,0.544,107,0.544,108,1.028,109,1.028,110,0.544,111,3.578,112,0.544,113,0.544,114,0.544,115,0.544,116,0.544,117,0.544,118,1.854,119,1.028,120,0.544,121,0.544,122,1.028,123,1.463,124,0.544,125,0.544,126,0.544,127,0.544,128,0.544,129,0.544,130,0.544]],["component/10",[1,0.6]],["title/11-1",[3,6.118]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[131,44.7]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11",[132,44.7]],["name/11",[132,1.964]],["text/11",[0,2.211,3,0.945,133,3.14,134,3.14,135,2.518,136,3.14,137,2.765,138,2.765,139,3.14,140,3.14,141,3.14]],["component/11",[1,0.6]],["title/12-1",[3,6.118]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[3,6.118]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[3,6.118]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[0,14.922,3,5.727]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12",[142,37.723]],["name/12",[142,1.658]],["text/12",[0,1.646,3,0.897,13,0.483,19,1.071,42,0.573,142,3.143,143,3.392,144,0.427,145,0.427,146,1.714,147,1.369,148,0.65,149,0.65,150,0.65,151,0.65,152,0.65,153,0.65,154,0.65,155,0.65,156,0.65,157,0.65,158,0.65,159,1.216,160,0.65,161,1.714,162,0.65,163,1.216,164,0.65,165,0.65,166,0.65,167,0.65,168,0.65,169,0.65,170,1.216,171,0.65,172,0.65,173,2.547,174,1.216,175,1.714,176,1.714,177,1.216,178,1.071,179,1.714,180,0.65,181,0.65,182,0.65,183,0.65,184,0.65,185,0.65,186,0.453,187,0.65,188,0.65,189,0.65,190,0.65,191,0.65,192,0.65,193,0.65,194,0.65,195,0.65]],["component/12",[1,0.6]],["title/13",[144,25.688,145,25.688]],["name/13",[144,0.866,145,0.866]],["text/13",[3,0.88,144,3.314,145,3.314,147,2.146,196,5.043]],["component/13",[1,0.6]],["title/14-1",[197,16.427,198,22.78,199,27.97,200,16.427,201,16.427]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[3,4.712,198,24.38]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[3,3.831,202,25.486,203,27.986]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14-4",[204,44.7]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["title/14-5",[202,31.346,205,34.421]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["title/14-6",[206,50.763]],["name/14-6",[]],["text/14-6",[]],["component/14-6",[]],["title/14-7",[3,6.118]],["name/14-7",[]],["text/14-7",[]],["component/14-7",[]],["title/14",[3,6.118]],["name/14",[198,1.391]],["text/14",[0,2.021,3,0.769,46,3.21,54,1.217,55,1.14,147,1.187,198,2.273,202,3.452,203,2.457,204,1.443,205,2.457,207,1.638,208,1.638,209,1.638,210,1.638,211,1.443,212,1.638,213,1.638,214,1.638,215,1.638,216,1.638,217,2.79,218,1.638,219,1.638,220,2.238,221,1.443,222,1.638,223,1.834,224,1.443,225,1.443]],["component/14",[1,0.6]],["title/15-1",[226,50.763]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[147,7.738,223,11.949,227,34.645,228,16.012,229,16.012]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15-3",[0,14.922,3,5.727]],["name/15-3",[]],["text/15-3",[]],["component/15-3",[]],["title/15",[0,18.354,230,34.421]],["name/15",[0,0.619,230,1.161]],["text/15",[0,2.676,3,0.897,54,1.337,55,0.692,135,1.443,137,0.876,143,1.975,147,2.169,220,0.798,223,1.985,228,3.751,229,1.584,231,0.995,232,0.876,233,0.995,234,0.995,235,0.995,236,0.995,237,0.739,238,0.995,239,0.995,240,0.995,241,0.995,242,0.876,243,0.876,244,0.995,245,0.995,246,0.995,247,0.995,248,0.995,249,0.995,250,0.995,251,0.876,252,0.995,253,0.995]],["component/15",[1,0.6]],["title/16-1",[254,39.09,255,34.421]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[3,6.118]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16-3",[256,44.7]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["title/16-4",[257,44.7]],["name/16-4",[]],["text/16-4",[]],["component/16-4",[]],["title/16-5",[258,44.7]],["name/16-5",[]],["text/16-5",[]],["component/16-5",[]],["title/16-6",[259,44.7]],["name/16-6",[]],["text/16-6",[]],["component/16-6",[]],["title/16-7",[260,44.7]],["name/16-7",[]],["text/16-7",[]],["component/16-7",[]],["title/16-8",[261,44.7]],["name/16-8",[]],["text/16-8",[]],["component/16-8",[]],["title/16-9",[3,3.831,262,27.986,263,27.986]],["name/16-9",[]],["text/16-9",[]],["component/16-9",[]],["title/16-10",[22,35.341]],["name/16-10",[]],["text/16-10",[]],["component/16-10",[]],["title/16",[3,4.712,223,25.688]],["name/16",[223,0.866,264,1.318]],["text/16",[0,2.05,3,0.956,13,2.813,131,0.727,135,0.662,138,0.727,143,1.217,147,0.646,198,0.515,220,0.662,223,2.008,224,0.727,232,0.727,251,0.727,255,0.727,257,0.727,258,1.336,259,0.727,260,0.727,261,0.727,262,0.727,263,0.727,265,0.825,266,0.825,267,0.825,268,0.825,269,0.825,270,0.825,271,0.825,272,0.825,273,0.825,274,0.825,275,0.825,276,0.825,277,0.825,278,0.825,279,0.825,280,0.825,281,0.662,282,0.825,283,2.107,284,0.825,285,0.825,286,0.825,287,0.825,288,0.825,289,0.825]],["component/16",[1,0.6]],["title/17-1",[3,6.118]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[3,6.118]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17-3",[290,50.763]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["title/17",[237,23.618,291,25.486,292,25.486]],["name/17",[211,1.964]],["text/17",[0,1.984,3,0.991,147,1.519,237,1.184,281,2.185,291,1.278,292,1.278,293,1.593,294,1.278,295,1.593,296,1.403,297,2.4,298,1.593,299,1.403,300,1.593,301,1.593,302,1.593]],["component/17",[1,0.6]],["title/18-1",[3,6.118]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[3,4.712,303,39.09]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18-3",[3,4.712,147,16.635]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["title/18-4",[3,6.118]],["name/18-4",[]],["text/18-4",[]],["component/18-4",[]],["title/18-5",[3,4.712,198,24.38]],["name/18-5",[]],["text/18-5",[]],["component/18-5",[]],["title/18-6",[3,6.118]],["name/18-6",[]],["text/18-6",[]],["component/18-6",[]],["title/18-7",[3,6.118]],["name/18-7",[]],["text/18-7",[]],["component/18-7",[]],["title/18-8",[22,35.341]],["name/18-8",[]],["text/18-8",[]],["component/18-8",[]],["title/18",[3,4.712,147,16.635]],["name/18",[147,0.561,304,1.161]],["text/18",[0,1.002,3,0.971,13,0.478,54,0.478,55,0.448,84,0.566,147,1.694,178,1.495,198,0.401,221,0.566,225,1.06,256,1.06,294,0.516,304,2.224,305,0.643,306,0.643,307,1.204,308,1.204,309,0.643,310,0.643,311,0.643,312,0.643,313,0.643,314,1.204,315,0.643,316,0.643,317,1.697,318,0.643,319,0.643,320,1.204,321,0.643,322,0.643,323,0.643,324,0.643,325,0.643,326,0.643,327,0.643,328,0.643,329,1.204,330,1.204,331,0.643,332,0.643,333,0.643,334,0.643,335,0.643,336,0.643,337,0.643,338,0.643,339,0.643,340,0.643,341,0.643,342,0.643,343,0.643,344,0.643,345,0.643,346,0.643,347,0.643]],["component/18",[1,0.6]],["title/19-1",[3,4.712,147,16.635]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19",[147,21.602]],["name/19",[147,0.949]],["text/19",[0,3.103,3,0.893,93,1.763,142,1.763,144,1.559,145,1.559,147,2.513,186,1.652,237,1.763,242,2.089,243,2.089,291,1.902,292,1.902]],["component/19",[1,0.6]],["title/20",[93,29.049,186,27.214]],["name/20",[93,0.98,186,0.918]],["text/20",[0,2.018,3,0.874,144,2.825,145,2.825,186,2.993,281,3.447,348,4.299,349,4.299]],["component/20",[1,0.6]],["title/21-1",[3,6.118]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[3,4.712,299,34.421]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21",[350,50.763]],["name/21",[351,2.231]],["text/21",[3,0.907,45,1.506,55,1.191,147,0.728,294,1.371,296,3.898,297,5.713,352,1.71,353,1.71,354,1.71,355,2.895,356,1.71,357,1.71,358,3.763,359,2.895,360,2.895,361,1.71,362,1.71]],["component/21",[1,0.6]],["title/22",[22,35.341]],["name/22",[22,1.553]],["text/22",[3,0.865,147,2.467,363,5.797]],["component/22",[1,0.6]],["title/23",[364,44.7]],["name/23",[364,1.964]],["text/23",[]],["component/23",[1,0.6]],["title/24-1",[227,32.7,365,23.133,366,23.133,367,20.37]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24",[368,31.346,369,39.09]],["name/24",[368,1.789]],["text/24",[3,0.677,367,3.525,368,3.21,370,4.003,371,4.003,372,4.003,373,4.003,374,4.003,375,4.003,376,4.003,377,4.003,378,4.003]],["component/24",[1,0.6]],["title/25",[3,3.831,379,27.986,380,27.986]],["name/25",[379,0.824,380,0.824,381,0.936]],["text/25",[]],["component/25",[1,0.6]]],"invertedIndex":[["",{"_index":3,"title":{"4":{},"5":{},"9":{},"14":{},"16":{},"18":{},"25":{},"5-1":{},"6-1":{},"6-6":{},"8-1":{},"8-2":{},"10-1":{},"10-3":{},"10-6":{},"10-7":{},"10-8":{},"10-9":{},"10-10":{},"10-11":{},"10-12":{},"11-1":{},"12-1":{},"12-2":{},"12-3":{},"12-4":{},"14-2":{},"14-3":{},"14-7":{},"15-3":{},"16-2":{},"16-9":{},"17-1":{},"17-2":{},"18-1":{},"18-2":{},"18-3":{},"18-4":{},"18-5":{},"18-6":{},"18-7":{},"19-1":{},"21-1":{},"21-2":{}},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{}},"component":{}}],["1",{"_index":55,"title":{},"name":{},"text":{"6":{},"14":{},"15":{},"18":{},"21":{}},"component":{}}],["1/10",{"_index":355,"title":{},"name":{},"text":{"21":{}},"component":{}}],["1/2",{"_index":325,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1/3",{"_index":352,"title":{},"name":{},"text":{"21":{}},"component":{}}],["1/4",{"_index":326,"title":{},"name":{},"text":{"18":{}},"component":{}}],["10",{"_index":114,"title":{},"name":{},"text":{"10":{}},"component":{}}],["10%的内存用于存放存活对象,此时结合上文描述的,新生代最优应该分成三块,所以得再预留一块10%的内存给s区,那么自然剩下的80%就是e",{"_index":362,"title":{},"name":{},"text":{"21":{}},"component":{}}],["16mb",{"_index":66,"title":{},"name":{},"text":{"6":{}},"component":{}}],["1mb",{"_index":336,"title":{},"name":{},"text":{"18":{}},"component":{}}],["2",{"_index":251,"title":{},"name":{},"text":{"15":{},"16":{}},"component":{}}],["2.2.2.release(2.3.5.releas",{"_index":15,"title":{},"name":{},"text":{"1":{}},"component":{}}],["2/3",{"_index":353,"title":{},"name":{},"text":{"21":{}},"component":{}}],["20",{"_index":115,"title":{},"name":{},"text":{"10":{}},"component":{}}],["3",{"_index":208,"title":{},"name":{},"text":{"14":{}},"component":{}}],["30",{"_index":104,"title":{},"name":{},"text":{"10":{}},"component":{}}],["32",{"_index":363,"title":{},"name":{},"text":{"22":{}},"component":{}}],["4",{"_index":209,"title":{},"name":{},"text":{"14":{}},"component":{}}],["4.0",{"_index":12,"title":{},"name":{},"text":{"1":{},"10":{}},"component":{}}],["4g",{"_index":319,"title":{},"name":{},"text":{"18":{}},"component":{}}],["5.0.5",{"_index":5,"title":{},"name":{},"text":{"1":{}},"component":{}}],["5.5.5",{"_index":87,"title":{},"name":{},"text":{"8":{}},"component":{}}],["5.7.30",{"_index":7,"title":{},"name":{},"text":{"1":{}},"component":{}}],["6.8.5(7.6.2",{"_index":16,"title":{},"name":{},"text":{"1":{}},"component":{}}],["7.4.0",{"_index":10,"title":{},"name":{},"text":{"1":{}},"component":{}}],["8",{"_index":220,"title":{},"name":{},"text":{"14":{},"15":{},"16":{}},"component":{}}],["8/10",{"_index":354,"title":{},"name":{},"text":{"21":{}},"component":{}}],["8:1:1",{"_index":299,"title":{"21-2":{}},"name":{},"text":{"17":{}},"component":{}}],["9",{"_index":224,"title":{},"name":{},"text":{"14":{},"16":{}},"component":{}}],["96kb",{"_index":73,"title":{},"name":{},"text":{"6":{}},"component":{}}],["adapt",{"_index":39,"title":{"6-4":{}},"name":{},"text":{},"component":{}}],["agent",{"_index":303,"title":{"18-2":{}},"name":{},"text":{},"component":{}}],["aka",{"_index":300,"title":{},"name":{},"text":{"17":{}},"component":{}}],["allkey",{"_index":123,"title":{},"name":{},"text":{"10":{}},"component":{}}],["all代替union",{"_index":30,"title":{},"name":{},"text":{"5":{}},"component":{}}],["aof",{"_index":96,"title":{"10-4":{}},"name":{},"text":{"10":{}},"component":{}}],["aop",{"_index":364,"title":{"23":{}},"name":{"23":{}},"text":{},"component":{}}],["api",{"_index":266,"title":{},"name":{},"text":{"16":{}},"component":{}}],["applic",{"_index":163,"title":{},"name":{},"text":{"12":{}},"component":{}}],["arch",{"_index":21,"title":{},"name":{},"text":{"1":{}},"component":{}}],["area",{"_index":292,"title":{"17":{}},"name":{},"text":{"17":{},"19":{}},"component":{}}],["arg",{"_index":178,"title":{},"name":{},"text":{"12":{},"18":{}},"component":{}}],["argument",{"_index":311,"title":{},"name":{},"text":{"18":{}},"component":{}}],["arraylist",{"_index":191,"title":{},"name":{},"text":{"12":{}},"component":{}}],["arraylist.class.getclassload",{"_index":192,"title":{},"name":{},"text":{"12":{}},"component":{}}],["autowir",{"_index":365,"title":{"24-1":{}},"name":{},"text":{},"component":{}}],["autowired、@inject是默认按照类型匹配的，@resourc",{"_index":377,"title":{},"name":{},"text":{"24":{}},"component":{}}],["autowired、@inject用法基本一样，不同的是@inject没有requir",{"_index":376,"title":{},"name":{},"text":{"24":{}},"component":{}}],["autowired如果需要按照名称匹配需要和@qualifier一起使用，@inject和@named一起使用，@resource则通过nam",{"_index":378,"title":{},"name":{},"text":{"24":{}},"component":{}}],["autowired是spring自带的，@resource是jsr250规范实现的，@inject是jsr330",{"_index":375,"title":{},"name":{},"text":{"24":{}},"component":{}}],["a，发现缓存中没有，对a这个key",{"_index":126,"title":{},"name":{},"text":{"10":{}},"component":{}}],["a，然后是b，之后是c、d。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理socket",{"_index":103,"title":{},"name":{},"text":{"10":{}},"component":{}}],["b",{"_index":23,"title":{},"name":{"4":{}},"text":{},"component":{}}],["basic",{"_index":210,"title":{},"name":{},"text":{"14":{}},"component":{}}],["bgsave",{"_index":109,"title":{},"name":{},"text":{"10":{}},"component":{}}],["binlog",{"_index":74,"title":{"7-3":{}},"name":{},"text":{"7":{}},"component":{}}],["bitmap",{"_index":71,"title":{},"name":{},"text":{"6":{}},"component":{}}],["boot",{"_index":380,"title":{"25":{}},"name":{"25":{}},"text":{},"component":{}}],["bootstrap",{"_index":159,"title":{},"name":{},"text":{"12":{}},"component":{}}],["buffer",{"_index":36,"title":{"6-2":{},"6-3":{},"6-5":{},"6-15":{}},"name":{},"text":{"8":{}},"component":{}}],["bytecod",{"_index":132,"title":{"11":{}},"name":{"11":{}},"text":{},"component":{}}],["c",{"_index":139,"title":{},"name":{},"text":{"11":{}},"component":{}}],["cach",{"_index":89,"title":{},"name":{},"text":{"8":{}},"component":{}}],["cd",{"_index":133,"title":{},"name":{},"text":{"11":{}},"component":{}}],["chang",{"_index":38,"title":{"6-3":{}},"name":{},"text":{},"component":{}}],["chapter",{"_index":207,"title":{},"name":{},"text":{"14":{}},"component":{}}],["class",{"_index":143,"title":{},"name":{},"text":{"12":{},"15":{},"16":{}},"component":{}}],["classfil",{"_index":148,"title":{},"name":{},"text":{"12":{}},"component":{}}],["classformaterror",{"_index":149,"title":{},"name":{},"text":{"12":{}},"component":{}}],["classload",{"_index":142,"title":{"12":{}},"name":{"12":{}},"text":{"12":{},"19":{}},"component":{}}],["classloader(aka",{"_index":164,"title":{},"name":{},"text":{"12":{}},"component":{}}],["classlod",{"_index":253,"title":{},"name":{},"text":{"15":{}},"component":{}}],["classnam",{"_index":305,"title":{},"name":{},"text":{"18":{}},"component":{}}],["classpath",{"_index":165,"title":{},"name":{},"text":{"12":{}},"component":{}}],["client",{"_index":83,"title":{},"name":{},"text":{"8":{}},"component":{}}],["client）和服务器端（mysqld",{"_index":82,"title":{},"name":{},"text":{"8":{}},"component":{}}],["clt",{"_index":264,"title":{},"name":{"16":{}},"text":{},"component":{}}],["cluster或者第三方集群方案如codi",{"_index":129,"title":{},"name":{},"text":{"10":{}},"component":{}}],["cm",{"_index":345,"title":{},"name":{},"text":{"18":{}},"component":{}}],["code",{"_index":187,"title":{},"name":{},"text":{"12":{}},"component":{}}],["compact",{"_index":205,"title":{"14-5":{}},"name":{},"text":{"14":{}},"component":{}}],["compil",{"_index":247,"title":{},"name":{},"text":{"15":{}},"component":{}}],["compon",{"_index":80,"title":{"8-3":{}},"name":{},"text":{},"component":{}}],["concurr",{"_index":212,"title":{},"name":{},"text":{"14":{}},"component":{}}],["connector",{"_index":88,"title":{},"name":{},"text":{"8":{}},"component":{}}],["control",{"_index":371,"title":{},"name":{},"text":{"24":{}},"component":{}}],["cope",{"_index":204,"title":{"14-4":{}},"name":{},"text":{"14":{}},"component":{}}],["copi",{"_index":218,"title":{},"name":{},"text":{"14":{}},"component":{}}],["cp",{"_index":166,"title":{},"name":{},"text":{"12":{}},"component":{}}],["cpu",{"_index":290,"title":{"17-3":{}},"name":{},"text":{},"component":{}}],["cs",{"_index":81,"title":{},"name":{},"text":{"8":{}},"component":{}}],["custom",{"_index":167,"title":{},"name":{},"text":{"12":{}},"component":{}}],["c、d举手，表示他们解答问题完毕，你下去依次检查c、d的答案，然后继续回到讲台上等。此时e、a又举手，然后去处理e和a",{"_index":105,"title":{},"name":{},"text":{"10":{}},"component":{}}],["c字段加1",{"_index":77,"title":{},"name":{},"text":{"7":{}},"component":{}}],["data",{"_index":291,"title":{"17":{}},"name":{},"text":{"17":{},"19":{}},"component":{}}],["dba进行人为调整。其本质是将频繁访问数据页的索引键值以“key”放在缓存中，“value”为该索引键值匹配完整记录所在页面（page）的位置，通过缩短寻路路径（search",{"_index":63,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ddd",{"_index":17,"title":{},"name":{},"text":{"1":{}},"component":{}}],["debugg",{"_index":272,"title":{},"name":{},"text":{"16":{}},"component":{}}],["delet",{"_index":58,"title":{"9-4":{}},"name":{},"text":{"6":{}},"component":{}}],["demo",{"_index":131,"title":{"11-2":{}},"name":{},"text":{"16":{}},"component":{}}],["dev",{"_index":254,"title":{"16-1":{}},"name":{},"text":{},"component":{}}],["develop",{"_index":232,"title":{},"name":{},"text":{"15":{},"16":{}},"component":{}}],["di",{"_index":369,"title":{"24":{}},"name":{},"text":{},"component":{}}],["di(depend",{"_index":373,"title":{},"name":{},"text":{"24":{}},"component":{}}],["dict",{"_index":113,"title":{},"name":{},"text":{"10":{}},"component":{}}],["dml",{"_index":59,"title":{},"name":{},"text":{"6":{}},"component":{}}],["doesn't",{"_index":188,"title":{},"name":{},"text":{"12":{}},"component":{}}],["doublewrit",{"_index":51,"title":{"6-15":{}},"name":{},"text":{},"component":{}}],["dsun.nio.maxdirectmemorys",{"_index":333,"title":{},"name":{},"text":{"18":{}},"component":{}}],["dump",{"_index":280,"title":{},"name":{},"text":{"16":{}},"component":{}}],["ecmascript",{"_index":285,"title":{},"name":{},"text":{"16":{}},"component":{}}],["eden",{"_index":296,"title":{},"name":{},"text":{"17":{},"21":{}},"component":{}}],["eden、from",{"_index":359,"title":{},"name":{},"text":{"21":{}},"component":{}}],["eden、to",{"_index":360,"title":{},"name":{},"text":{"21":{}},"component":{}}],["elasticsearch",{"_index":9,"title":{"2":{}},"name":{},"text":{"1":{}},"component":{}}],["engin",{"_index":145,"title":{"13":{}},"name":{"13":{}},"text":{"12":{},"13":{},"19":{},"20":{}},"component":{}}],["environ",{"_index":238,"title":{},"name":{},"text":{"15":{}},"component":{}}],["es5",{"_index":286,"title":{},"name":{},"text":{"16":{}},"component":{}}],["es6",{"_index":287,"title":{},"name":{},"text":{"16":{}},"component":{}}],["execut",{"_index":144,"title":{"13":{}},"name":{"13":{}},"text":{"12":{},"13":{},"19":{},"20":{}},"component":{}}],["expir",{"_index":112,"title":{},"name":{},"text":{"10":{}},"component":{}}],["extcheck",{"_index":270,"title":{},"name":{},"text":{"16":{}},"component":{}}],["extens",{"_index":161,"title":{},"name":{},"text":{"12":{}},"component":{}}],["fallback",{"_index":130,"title":{},"name":{},"text":{"10":{}},"component":{}}],["figur",{"_index":54,"title":{},"name":{},"text":{"6":{},"14":{},"15":{},"18":{}},"component":{}}],["file",{"_index":43,"title":{"6-9":{}},"name":{},"text":{},"component":{}}],["filenam",{"_index":306,"title":{},"name":{},"text":{"18":{}},"component":{}}],["flag",{"_index":315,"title":{},"name":{},"text":{"18":{}},"component":{}}],["forc",{"_index":27,"title":{},"name":{},"text":{"5":{}},"component":{}}],["fork",{"_index":110,"title":{},"name":{},"text":{"10":{}},"component":{}}],["frame",{"_index":301,"title":{},"name":{},"text":{"17":{}},"component":{}}],["full",{"_index":201,"title":{"14-1":{}},"name":{},"text":{},"component":{}}],["fullgc",{"_index":322,"title":{},"name":{},"text":{"18":{}},"component":{}}],["g",{"_index":136,"title":{},"name":{},"text":{"11":{}},"component":{}}],["g1",{"_index":225,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["gc",{"_index":198,"title":{"14-1":{},"14-2":{},"18-5":{}},"name":{"14":{}},"text":{"14":{},"16":{},"18":{}},"component":{}}],["gener",{"_index":46,"title":{"6-10":{}},"name":{},"text":{"14":{}},"component":{}}],["global",{"_index":50,"title":{"6-14":{}},"name":{},"text":{},"component":{}}],["group",{"_index":33,"title":{},"name":{},"text":{"5":{}},"component":{}}],["h",{"_index":269,"title":{},"name":{},"text":{"16":{}},"component":{}}],["hash",{"_index":40,"title":{"6-4":{}},"name":{},"text":{"6":{},"10":{}},"component":{}}],["heap",{"_index":294,"title":{},"name":{},"text":{"17":{},"18":{},"21":{}},"component":{}}],["hello",{"_index":252,"title":{},"name":{},"text":{"15":{}},"component":{}}],["hello.class",{"_index":141,"title":{},"name":{},"text":{"11":{}},"component":{}}],["hello.java",{"_index":137,"title":{},"name":{},"text":{"11":{},"15":{}},"component":{}}],["home/bunny/interview/docs/modules/java/attach",{"_index":134,"title":{},"name":{},"text":{"11":{}},"component":{}}],["hotspot",{"_index":221,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["i/o",{"_index":67,"title":{"10-2":{}},"name":{},"text":{"6":{}},"component":{}}],["i/o多路复用。假设你是一个老师，让30",{"_index":102,"title":{},"name":{},"text":{"10":{}},"component":{}}],["ibm的一项研究,表明新生代中有98%的对象是朝生夕灭的,换言之,每次mionrgc后存活的对象应该小于等于2",{"_index":361,"title":{},"name":{},"text":{"21":{}},"component":{}}],["id",{"_index":307,"title":{},"name":{},"text":{"18":{}},"component":{}}],["id=2",{"_index":76,"title":{},"name":{},"text":{"7":{}},"component":{}}],["import",{"_index":170,"title":{},"name":{},"text":{"12":{}},"component":{}}],["index",{"_index":2,"title":{"6-4":{}},"name":{"1":{},"2":{},"3":{},"5":{},"10":{}},"text":{"5":{}},"component":{}}],["index，ahi",{"_index":62,"title":{},"name":{},"text":{"6":{}},"component":{}}],["initi",{"_index":157,"title":{},"name":{},"text":{"12":{}},"component":{}}],["inject",{"_index":367,"title":{"24-1":{}},"name":{},"text":{"24":{}},"component":{}}],["innodb",{"_index":53,"title":{"6":{}},"name":{"6":{}},"text":{"6":{},"7":{},"8":{}},"component":{}}],["innodb_file_per_table=on",{"_index":69,"title":{},"name":{},"text":{"6":{}},"component":{}}],["innodb_log_buffer_s",{"_index":65,"title":{},"name":{},"text":{"6":{}},"component":{}}],["innodb、myisam",{"_index":85,"title":{},"name":{},"text":{"8":{}},"component":{}}],["innodb引擎的一个特殊功能，当它注意到某些索引值使用的非常频繁，发现建立哈希索引（又称散列索引）可以带来速度的提升，innodb就会在自己的内存缓冲区（buff",{"_index":60,"title":{},"name":{},"text":{"6":{}},"component":{}}],["insert",{"_index":56,"title":{"9-2":{}},"name":{},"text":{"6":{}},"component":{}}],["interfac",{"_index":93,"title":{"20":{}},"name":{"20":{}},"text":{"8":{},"19":{}},"component":{}}],["interpreter。class",{"_index":196,"title":{},"name":{},"text":{"13":{}},"component":{}}],["interview",{"_index":1,"title":{"1":{}},"name":{},"text":{},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{}}}],["ioc",{"_index":368,"title":{"24":{}},"name":{"24":{}},"text":{"24":{}},"component":{}}],["ioc(invers",{"_index":370,"title":{},"name":{},"text":{"24":{}},"component":{}}],["ioc是设计思想，di",{"_index":374,"title":{},"name":{},"text":{"24":{}},"component":{}}],["io模型，第三种就是i/o",{"_index":106,"title":{},"name":{},"text":{"10":{}},"component":{}}],["jar",{"_index":13,"title":{},"name":{},"text":{"1":{},"12":{},"16":{},"18":{}},"component":{}}],["jarsign",{"_index":277,"title":{},"name":{},"text":{"16":{}},"component":{}}],["java",{"_index":0,"title":{"1":{},"15":{},"12-4":{},"15-3":{}},"name":{"15":{}},"text":{"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{}},"component":{}}],["java.util.arraylist",{"_index":172,"title":{},"name":{},"text":{"12":{}},"component":{}}],["java8",{"_index":329,"title":{},"name":{},"text":{"18":{}},"component":{}}],["java`编译器、调试器、jshel",{"_index":240,"title":{},"name":{},"text":{"15":{}},"component":{}}],["javac",{"_index":135,"title":{},"name":{},"text":{"11":{},"15":{},"16":{}},"component":{}}],["javadoc",{"_index":265,"title":{},"name":{},"text":{"16":{}},"component":{}}],["javah",{"_index":267,"title":{},"name":{},"text":{"16":{}},"component":{}}],["javap",{"_index":138,"title":{},"name":{},"text":{"11":{},"16":{}},"component":{}}],["javascript",{"_index":284,"title":{},"name":{},"text":{"16":{}},"component":{}}],["java开发中，ioc",{"_index":372,"title":{},"name":{},"text":{"24":{}},"component":{}}],["java选项来定制它。例如，为jvm分配最小和最大内存。jvm",{"_index":244,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jcmd",{"_index":259,"title":{"16-6":{}},"name":{},"text":{"16":{}},"component":{}}],["jdb",{"_index":271,"title":{},"name":{},"text":{"16":{}},"component":{}}],["jdbc",{"_index":168,"title":{},"name":{},"text":{"12":{}},"component":{}}],["jdep",{"_index":274,"title":{},"name":{},"text":{"16":{}},"component":{}}],["jdk",{"_index":223,"title":{"16":{},"15-2":{}},"name":{"16":{}},"text":{"14":{},"15":{},"16":{}},"component":{}}],["jdk(java",{"_index":231,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jdk1.7",{"_index":328,"title":{},"name":{},"text":{"18":{}},"component":{}}],["jdk8",{"_index":338,"title":{},"name":{},"text":{"18":{}},"component":{}}],["jdk内部类，通常是位于$java_home/jre/lib目录中的rt.jar",{"_index":160,"title":{},"name":{},"text":{"12":{}},"component":{}}],["jdk和jre都包含jvm，因此我们可以运行java",{"_index":249,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jdk扩展目录加载，通常是$java_home/lib/ext目录，或在java.ext.dir",{"_index":162,"title":{},"name":{},"text":{"12":{}},"component":{}}],["jdk用于开发目的，而jre用于运行java",{"_index":248,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jinfo",{"_index":261,"title":{"16-8":{}},"name":{},"text":{"16":{}},"component":{}}],["jit",{"_index":229,"title":{"15-2":{}},"name":{},"text":{"15":{}},"component":{}}],["jit(just",{"_index":245,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jj",{"_index":263,"title":{"16-9":{}},"name":{},"text":{"16":{}},"component":{}}],["jmap",{"_index":258,"title":{"16-5":{}},"name":{},"text":{"16":{}},"component":{}}],["jmm",{"_index":211,"title":{},"name":{"17":{}},"text":{"14":{}},"component":{}}],["jni",{"_index":268,"title":{},"name":{},"text":{"16":{}},"component":{}}],["join",{"_index":32,"title":{},"name":{},"text":{"5":{}},"component":{}}],["jp",{"_index":256,"title":{"16-3":{}},"name":{},"text":{"18":{}},"component":{}}],["jpda",{"_index":273,"title":{},"name":{},"text":{"16":{}},"component":{}}],["jre",{"_index":228,"title":{"15-2":{}},"name":{},"text":{"15":{}},"component":{}}],["jre(java",{"_index":236,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jrunscript",{"_index":262,"title":{"16-9":{}},"name":{},"text":{"16":{}},"component":{}}],["js",{"_index":283,"title":{},"name":{},"text":{"16":{}},"component":{}}],["jshell",{"_index":289,"title":{},"name":{},"text":{"16":{}},"component":{}}],["jstack",{"_index":260,"title":{"16-7":{}},"name":{},"text":{"16":{}},"component":{}}],["jstat",{"_index":257,"title":{"16-4":{}},"name":{},"text":{"16":{}},"component":{}}],["jvm",{"_index":147,"title":{"18":{},"19":{},"15-2":{},"18-3":{},"19-1":{}},"name":{"18":{},"19":{}},"text":{"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{}},"component":{}}],["jvm(java",{"_index":241,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jvm、java",{"_index":239,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jvm是java",{"_index":250,"title":{},"name":{},"text":{"15":{}},"component":{}}],["jvm，默认情况下使用的是并行垃圾收集器（parallel",{"_index":222,"title":{},"name":{},"text":{"14":{}},"component":{}}],["key",{"_index":111,"title":{},"name":{},"text":{"10":{}},"component":{}}],["keytool",{"_index":276,"title":{},"name":{},"text":{"16":{}},"component":{}}],["key在同一时间过期，这样的后果就是⼤量的请求进来直接打到db",{"_index":127,"title":{},"name":{},"text":{"10":{}},"component":{}}],["key在某个时间过期，导致所有的请求直接打在db",{"_index":125,"title":{},"name":{},"text":{"10":{}},"component":{}}],["kit",{"_index":233,"title":{},"name":{},"text":{"15":{}},"component":{}}],["legacy8ujss",{"_index":181,"title":{},"name":{},"text":{"12":{}},"component":{}}],["legacy8ujsse.class.getclassload",{"_index":182,"title":{},"name":{},"text":{"12":{}},"component":{}}],["lfu（redi",{"_index":122,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lib。原本多用于一些专业领域，如java驱动，地图制作引擎等，现在关于这种本地方法接口的调用已经被类似于socket通信，webservic",{"_index":349,"title":{},"name":{},"text":{"20":{}},"component":{}}],["limit",{"_index":31,"title":{},"name":{},"text":{"5":{}},"component":{}}],["link",{"_index":150,"title":{},"name":{},"text":{"12":{}},"component":{}}],["list",{"_index":99,"title":{},"name":{},"text":{"10":{}},"component":{}}],["load",{"_index":146,"title":{},"name":{},"text":{"12":{}},"component":{}}],["loader",{"_index":158,"title":{},"name":{},"text":{"12":{}},"component":{}}],["log",{"_index":8,"title":{"7":{},"6-5":{},"6-16":{},"6-17":{},"7-1":{},"7-2":{}},"name":{"7":{}},"text":{"1":{},"6":{},"7":{}},"component":{}}],["lru",{"_index":124,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lru（redis3.0",{"_index":121,"title":{},"name":{},"text":{"10":{}},"component":{}}],["m",{"_index":312,"title":{},"name":{},"text":{"18":{}},"component":{}}],["machin",{"_index":243,"title":{},"name":{},"text":{"15":{},"19":{}},"component":{}}],["main",{"_index":310,"title":{},"name":{},"text":{"18":{}},"component":{}}],["main(str",{"_index":177,"title":{},"name":{},"text":{"12":{}},"component":{}}],["major",{"_index":200,"title":{"14-1":{}},"name":{},"text":{},"component":{}}],["mark",{"_index":202,"title":{"14-3":{},"14-5":{}},"name":{},"text":{"14":{}},"component":{}}],["memori",{"_index":86,"title":{},"name":{},"text":{"8":{}},"component":{}}],["meta",{"_index":330,"title":{},"name":{},"text":{"18":{}},"component":{}}],["metaspac",{"_index":339,"title":{},"name":{},"text":{"18":{}},"component":{}}],["method",{"_index":348,"title":{},"name":{},"text":{"20":{}},"component":{}}],["minor",{"_index":197,"title":{"14-1":{}},"name":{},"text":{},"component":{}}],["minorgc",{"_index":358,"title":{},"name":{},"text":{"21":{}},"component":{}}],["more",{"_index":35,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mqsql",{"_index":6,"title":{},"name":{},"text":{"1":{}},"component":{}}],["mysql",{"_index":26,"title":{"8":{}},"name":{"8":{}},"text":{"5":{},"7":{},"8":{}},"component":{}}],["mysqld",{"_index":68,"title":{},"name":{},"text":{"6":{}},"component":{}}],["nativ",{"_index":186,"title":{"20":{}},"name":{"20":{}},"text":{"12":{},"19":{},"20":{}},"component":{}}],["new",{"_index":194,"title":{},"name":{},"text":{"12":{}},"component":{}}],["noeviction（redis3.0",{"_index":116,"title":{},"name":{},"text":{"10":{}},"component":{}}],["nosql",{"_index":92,"title":{},"name":{},"text":{"8":{}},"component":{}}],["null",{"_index":184,"title":{},"name":{},"text":{"12":{}},"component":{}}],["oom",{"_index":117,"title":{},"name":{},"text":{"10":{}},"component":{}}],["operand",{"_index":302,"title":{},"name":{},"text":{"17":{}},"component":{}}],["optim",{"_index":91,"title":{},"name":{},"text":{"8":{}},"component":{}}],["option",{"_index":304,"title":{},"name":{"18":{}},"text":{"18":{}},"component":{}}],["org.openjsse.legacy8ujsse.net.ssl.legacy8ujss",{"_index":171,"title":{},"name":{},"text":{"12":{}},"component":{}}],["overview",{"_index":226,"title":{"15-1":{}},"name":{},"text":{},"component":{}}],["parser",{"_index":90,"title":{},"name":{},"text":{"8":{}},"component":{}}],["path）从而提升mysql",{"_index":64,"title":{},"name":{},"text":{"6":{}},"component":{}}],["paus",{"_index":216,"title":{},"name":{},"text":{"14":{}},"component":{}}],["per",{"_index":44,"title":{"6-9":{}},"name":{},"text":{},"component":{}}],["perm",{"_index":340,"title":{},"name":{},"text":{"18":{}},"component":{}}],["platform",{"_index":230,"title":{"15":{}},"name":{"15":{}},"text":{},"component":{}}],["policytool",{"_index":278,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pool",{"_index":37,"title":{"6-2":{}},"name":{},"text":{},"component":{}}],["pool）里，开辟一块区域，建立自适应哈希索引（adapt",{"_index":61,"title":{},"name":{},"text":{"6":{}},"component":{}}],["prepar",{"_index":153,"title":{},"name":{},"text":{"12":{}},"component":{}}],["print",{"_index":183,"title":{},"name":{},"text":{"12":{}},"component":{}}],["product",{"_index":20,"title":{},"name":{},"text":{"1":{}},"component":{}}],["program",{"_index":84,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["ps",{"_index":279,"title":{},"name":{},"text":{"16":{}},"component":{}}],["public",{"_index":173,"title":{},"name":{},"text":{"12":{}},"component":{}}],["q&a",{"_index":350,"title":{"21":{}},"name":{},"text":{},"component":{}}],["qa",{"_index":351,"title":{},"name":{"21":{}},"text":{},"component":{}}],["queri",{"_index":94,"title":{"9-1":{}},"name":{},"text":{},"component":{}}],["random",{"_index":119,"title":{},"name":{},"text":{"10":{}},"component":{}}],["rbd",{"_index":107,"title":{},"name":{},"text":{"10":{}},"component":{}}],["rdb",{"_index":97,"title":{"10-5":{}},"name":{},"text":{"10":{}},"component":{}}],["read",{"_index":34,"title":{"7-1":{}},"name":{},"text":{"5":{}},"component":{}}],["redi",{"_index":4,"title":{"10":{},"10-8":{}},"name":{},"text":{"1":{},"10":{}},"component":{}}],["redis本身的redi",{"_index":128,"title":{},"name":{},"text":{"10":{}},"component":{}}],["redo",{"_index":52,"title":{"6-16":{}},"name":{},"text":{"6":{},"7":{}},"component":{}}],["ref",{"_index":22,"title":{"22":{},"16-10":{},"18-8":{}},"name":{"22":{}},"text":{"1":{}},"component":{}}],["refer",{"_index":156,"title":{},"name":{},"text":{"12":{}},"component":{}}],["repl",{"_index":288,"title":{},"name":{},"text":{"16":{}},"component":{}}],["resolut",{"_index":154,"title":{},"name":{},"text":{"12":{}},"component":{}}],["resourc",{"_index":366,"title":{"24-1":{}},"name":{},"text":{},"component":{}}],["rocketmq",{"_index":11,"title":{"3":{}},"name":{},"text":{"1":{}},"component":{}}],["row",{"_index":79,"title":{},"name":{},"text":{"7":{}},"component":{}}],["run",{"_index":95,"title":{},"name":{"9":{}},"text":{},"component":{}}],["runtim",{"_index":237,"title":{"17":{}},"name":{},"text":{"15":{},"17":{},"19":{}},"component":{}}],["s",{"_index":357,"title":{},"name":{},"text":{"21":{}},"component":{}}],["save",{"_index":108,"title":{},"name":{},"text":{"10":{}},"component":{}}],["scratch",{"_index":174,"title":{},"name":{},"text":{"12":{}},"component":{}}],["scratch.class.getclassload",{"_index":180,"title":{},"name":{},"text":{"12":{}},"component":{}}],["select",{"_index":28,"title":{},"name":{},"text":{"5":{}},"component":{}}],["server",{"_index":75,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["session",{"_index":49,"title":{"6-13":{}},"name":{},"text":{},"component":{}}],["set",{"_index":100,"title":{},"name":{},"text":{"10":{}},"component":{}}],["show",{"_index":189,"title":{},"name":{},"text":{"12":{}},"component":{}}],["spring",{"_index":379,"title":{"25":{}},"name":{"25":{}},"text":{},"component":{}}],["springboot",{"_index":14,"title":{},"name":{},"text":{"1":{}},"component":{}}],["sql",{"_index":25,"title":{"9":{},"5-2":{}},"name":{},"text":{"7":{},"8":{}},"component":{}}],["stack",{"_index":281,"title":{},"name":{},"text":{"16":{},"17":{},"20":{}},"component":{}}],["stack)”与“堆(heap",{"_index":295,"title":{},"name":{},"text":{"17":{}},"component":{}}],["start",{"_index":381,"title":{},"name":{"25":{}},"text":{},"component":{}}],["statement",{"_index":78,"title":{},"name":{},"text":{"7":{}},"component":{}}],["static",{"_index":175,"title":{},"name":{},"text":{"12":{}},"component":{}}],["stop",{"_index":214,"title":{},"name":{},"text":{"14":{}},"component":{}}],["string",{"_index":98,"title":{},"name":{},"text":{"10":{}},"component":{}}],["stw",{"_index":213,"title":{},"name":{},"text":{"14":{}},"component":{}}],["summari",{"_index":206,"title":{"14-6":{}},"name":{},"text":{},"component":{}}],["survivor",{"_index":297,"title":{},"name":{},"text":{"17":{},"21":{}},"component":{}}],["survivor、to",{"_index":298,"title":{},"name":{},"text":{"17":{}},"component":{}}],["sweep",{"_index":203,"title":{"14-3":{}},"name":{},"text":{"14":{}},"component":{}}],["symbol",{"_index":155,"title":{},"name":{},"text":{"12":{}},"component":{}}],["system",{"_index":42,"title":{"6-8":{}},"name":{},"text":{"12":{}},"component":{}}],["system.out.println(\"classload",{"_index":179,"title":{},"name":{},"text":{"12":{}},"component":{}}],["s区来对年轻对象进行拦截,降低fullgc",{"_index":356,"title":{},"name":{},"text":{"21":{}},"component":{}}],["tabl",{"_index":45,"title":{"6-9":{}},"name":{},"text":{"21":{}},"component":{}}],["table.frm",{"_index":72,"title":{},"name":{},"text":{"6":{}},"component":{}}],["table.ibd",{"_index":70,"title":{},"name":{},"text":{"6":{}},"component":{}}],["tablespac",{"_index":41,"title":{"6-7":{},"6-8":{},"6-9":{},"6-10":{},"6-11":{},"6-12":{},"6-13":{},"6-14":{}},"name":{},"text":{},"component":{}}],["temporari",{"_index":48,"title":{"6-12":{},"6-13":{},"6-14":{}},"name":{},"text":{},"component":{}}],["tenur",{"_index":217,"title":{},"name":{},"text":{"14":{}},"component":{}}],["thread",{"_index":293,"title":{},"name":{},"text":{"17":{}},"component":{}}],["time",{"_index":246,"title":{},"name":{},"text":{"15":{}},"component":{}}],["tool",{"_index":255,"title":{"16-1":{}},"name":{},"text":{"16":{}},"component":{}}],["trace",{"_index":282,"title":{},"name":{},"text":{"16":{}},"component":{}}],["trade",{"_index":18,"title":{},"name":{},"text":{"1":{}},"component":{}}],["tree",{"_index":24,"title":{},"name":{"4":{}},"text":{},"component":{}}],["ttl",{"_index":120,"title":{},"name":{},"text":{"10":{}},"component":{}}],["u",{"_index":193,"title":{},"name":{},"text":{"12":{}},"component":{}}],["u.getid",{"_index":195,"title":{},"name":{},"text":{"12":{}},"component":{}}],["undo",{"_index":47,"title":{"6-11":{},"6-17":{},"7-2":{}},"name":{},"text":{"6":{}},"component":{}}],["union",{"_index":29,"title":{},"name":{},"text":{"5":{}},"component":{}}],["unix",{"_index":235,"title":{},"name":{},"text":{"15":{}},"component":{}}],["up",{"_index":190,"title":{},"name":{},"text":{"12":{}},"component":{}}],["updat",{"_index":57,"title":{"9-3":{}},"name":{},"text":{"6":{}},"component":{}}],["url类加载器(通过url加载jar",{"_index":169,"title":{},"name":{},"text":{"12":{}},"component":{}}],["user",{"_index":19,"title":{},"name":{},"text":{"1":{},"12":{}},"component":{}}],["v",{"_index":309,"title":{},"name":{},"text":{"18":{}},"component":{}}],["v.",{"_index":199,"title":{"14-1":{}},"name":{},"text":{},"component":{}}],["verbos",{"_index":140,"title":{},"name":{},"text":{"11":{}},"component":{}}],["verif",{"_index":151,"title":{},"name":{},"text":{"12":{}},"component":{}}],["verifyerror",{"_index":152,"title":{},"name":{},"text":{"12":{}},"component":{}}],["virtual",{"_index":242,"title":{},"name":{},"text":{"15":{},"19":{}},"component":{}}],["vm",{"_index":308,"title":{},"name":{},"text":{"18":{}},"component":{}}],["void",{"_index":176,"title":{},"name":{},"text":{"12":{}},"component":{}}],["volatil",{"_index":118,"title":{},"name":{},"text":{"10":{}},"component":{}}],["vs",{"_index":227,"title":{"15-2":{},"24-1":{}},"name":{},"text":{},"component":{}}],["windows、mac",{"_index":234,"title":{},"name":{},"text":{"15":{}},"component":{}}],["world",{"_index":215,"title":{},"name":{},"text":{"14":{}},"component":{}}],["written",{"_index":185,"title":{},"name":{},"text":{"12":{}},"component":{}}],["x",{"_index":313,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xm",{"_index":320,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xmn",{"_index":323,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xms4g",{"_index":321,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xmx",{"_index":317,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xmx4g",{"_index":318,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xss",{"_index":334,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xss1m",{"_index":335,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx",{"_index":314,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:+useconcmarksweepgc",{"_index":344,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:+useg1gc",{"_index":343,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:+useparallelgc",{"_index":347,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:+useserialgc",{"_index":346,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:key=valu",{"_index":316,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:maxdirectmemorysize=s",{"_index":332,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:maxmetaspaces",{"_index":342,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:maxmetaspacesize=s",{"_index":331,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:maxpermsize=s",{"_index":327,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:metaspaces",{"_index":341,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:newsiz",{"_index":324,"title":{},"name":{},"text":{"18":{}},"component":{}}],["xx:threadstacksize=1m",{"_index":337,"title":{},"name":{},"text":{"18":{}},"component":{}}],["young",{"_index":219,"title":{},"name":{},"text":{"14":{}},"component":{}}],["zip",{"_index":275,"title":{},"name":{},"text":{"16":{}},"component":{}}],["zset",{"_index":101,"title":{},"name":{},"text":{"10":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"使用版本 中间件 Redis: 5.0.5 MqSQL: 5.7.30-log ElasticSearch: 7.4.0 商业版 RocketMQ: 4.0系列 标准版 jar SpringBoot: 2.2.2.RELEASE(2.3.5.RELEASE) ElasticSearch: 6.8.5(7.6.2) DDD 核心域：trade user product 通用域：arch 支撑域：ref","title":"Java Interview","component":"interview","version":"","name":"index","url":"/interview/index.html","titles":[]},"2":{"id":2,"text":"","title":"ElasticSearch","component":"interview","version":"","name":"index","url":"/interview/elastic/index.html","titles":[]},"3":{"id":3,"text":"","title":"RocketMQ","component":"interview","version":"","name":"index","url":"/interview/mq/index.html","titles":[]},"4":{"id":4,"text":"数据存在主键索引上 会把相邻主键的数据安放在相邻的物理存储上","title":"存储","component":"interview","version":"","name":"b-tree","url":"/interview/mysql/b-tree.html","titles":[]},"5":{"id":5,"text":"列上计算(有函数) like 左% 联合索引顺序不对 MySQL自己选错了 force index 避免使用select 用union all代替union 小表驱动大表 批量操作 多用limit in中值太多 增量查询 高效的分页 用连接查询代替子查询 join的表不宜过多 join时要注意 控制索引的数量 选择合理的字段类型 提升group by的效率 索引优化 read more","title":"索引","component":"interview","version":"","name":"index","url":"/interview/mysql/index.html","titles":[{"text":"索引失效","hash":"索引失效","id":1},{"text":"SQL优化","hash":"sql优化","id":2}]},"6":{"id":6,"text":"Figure 1. 结构图 缓冲池是主内存中 InnoDB 在被访问时缓存表和索引数据的区域。缓冲池允许直接从内存访问频繁使用的数据，从而加快了处理速度。 更改缓冲区是一种特殊的数据结构，用于在辅助索引页不在缓冲池中时缓存对这些页的更改。缓冲的更改可能由 INSERT 、 UPDATE 或 DELETE 操作(DML)引起，稍后当其他读取操作将页面加载到缓冲池中时，这些更改将被合并。 Innodb引擎的一个特殊功能，当它注意到某些索引值使用的非常频繁，发现建立哈希索引（又称散列索引）可以带来速度的提升，Innodb就会在自己的内存缓冲区（Buffer Pool）里，开辟一块区域，建立自适应哈希索引（Adaptive Hash Index，AHI），以便加速查询。 这种索引属于数据库的自优化，无需DBA进行人为调整。其本质是将频繁访问数据页的索引键值以“Key”放在缓存中，“Value”为该索引键值匹配完整记录所在页面（Page）的位置，通过缩短寻路路径（Search Path）从而提升MySQL查询性能的一种方式。 日志缓冲区是保存要写入磁盘上的日志文件的数据的内存区。日志缓冲区大小由 innodb_log_buffer_size 变量定义。默认大小为16MB。日志缓冲区的内容会定期刷新到磁盘。大型日志缓冲区使大型事务能够运行，而无需在事务提交之前将 redo log 数据写入磁盘。因此，如果您有更新、插入或删除许多行的事务，则增加日志缓冲区的大小可以节省磁盘I/O。 表空间是InnoDB存储引擎中逻辑结构的最高层，所有数据逻辑上都存储在表空间中。 系统表空间是 InnoDB 数据字、双写缓冲、写缓冲和回滚日志的存储位置，如果关闭独立表空间，它也将存储所有表数据和索引。 开启独立表空间之后， [mysqld] innodb_file_per_table=ON InnoDB 会为每个数据库单独创建子文件夹，数据库文件夹内为每个数据表单独建立一个表空间文件 table.ibd 用于存放每个表的数据、索引和插入缓冲 Bitmap 页，同时创建一个 table.frm 文件用于保存表结构信息。其他类型的信息，如回滚信息、插入缓冲索引页、系统事务信息、二次写缓冲等仍存放于系统表空间内。因此即使使用独立表空间，系统表空间也会不断增长。每个独立表空间的初始大小是 96KB。 Undo 表空间用于存放一个或多个 undo log 文件。","title":"InnoDB","component":"interview","version":"","name":"innodb","url":"/interview/mysql/innodb.html","titles":[{"text":"内存结构","hash":"内存结构","id":1},{"text":"Buffer Pool","hash":"buffer-pool","id":2},{"text":"Change Buffer","hash":"change-buffer","id":3},{"text":"Adaptive Hash Index","hash":"adaptive-hash-index","id":4},{"text":"Log Buffer","hash":"log-buffer","id":5},{"text":"磁盘结构","hash":"磁盘结构","id":6},{"text":"Tablespaces","hash":"tablespaces","id":7},{"text":"System Tablespace","hash":"system-tablespace","id":8},{"text":"File-Per-Table Tablespaces","hash":"file-per-table-tablespaces","id":9},{"text":"General Tablespaces","hash":"general-tablespaces","id":10},{"text":"Undo Tablespaces","hash":"undo-tablespaces","id":11},{"text":"Temporary Tablespaces","hash":"temporary-tablespaces","id":12},{"text":"Session Temporary Tablespaces","hash":"session-temporary-tablespaces","id":13},{"text":"Global Temporary Tablespace","hash":"global-temporary-tablespace","id":14},{"text":"Doublewrite Buffer","hash":"doublewrite-buffer","id":15},{"text":"Redo Log","hash":"redo-log","id":16},{"text":"Undo Logs","hash":"undo-logs","id":17}]},"7":{"id":7,"text":"InnoDB 引擎特有的日志。 redo log 是物理日志，记录的是“在某个数据页上做了什么修改”。 redo log 是固定大小，循环写，不能持久化。 MySQL Server 层的日志。 binlog 是逻辑日志，记录的是这个语句的原始逻辑，给 ID=2 这一行的c字段加1。 binlog 有两种格式， statement 格式的话是记sql语句， row格式会记录行的内容，记两条，更新前和更新后都有。 binlog 是可以追加写入的。文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。","title":"Log","component":"interview","version":"","name":"log","url":"/interview/mysql/log.html","titles":[{"text":"read log","hash":"read-log","id":1},{"text":"undo log","hash":"undo-log","id":2},{"text":"binlog","hash":"binlog","id":3}]},"8":{"id":8,"text":"MySQL 从整体来说还是 CS 架构，也就是由客户端（Client）和服务器端（mysqld）两大部分构成。 MySQL Client Programs 服务器端大体可以分为两部分：Server 层和存储引擎层。 大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。 Server 层 包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核 心服务功能，以及所有的内置函数(如日期、时间、数学和加密函数等)，所有跨存储引擎 的功能都在这一层实现，比如存储过程、触发器、视图等。 存储引擎层 负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、 Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开 始成为了默认存储引擎。 连接器 (MySQL Connectors) 连接器负责跟客户端建立连接、获取权限、维持和管理连接。 查询缓存 (Caches & Buffers) 缓存查询结果。 分析器 (Parser) 对 SQL 语句做解析。先做\"词法分析\"，再做\"语法分析\" 词法分析 实别关键字、表名、字段名等 语法分析 判断你输入的这个 SQL 语句是否满足 MySQL 语法。 优化器 (Optimizer) 优化 SQL 语句的执行，判断要使用的索引、不同条件的执行的先后顺序等。 执行器 (NoSQL Interface 、SQL Interface) 先判断权限 执行一条 SQL 涉及的资源要大于 SQL 语句字面上。如触发器等。所以无法在执行之前判断权限。 如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这 个引擎提供的接口。","title":"MySQL基本架构","component":"interview","version":"","name":"mysql","url":"/interview/mysql/mysql.html","titles":[{"text":"客户端","hash":"客户端","id":1},{"text":"服务器端逻辑架构","hash":"服务器端逻辑架构","id":2},{"text":"Component","hash":"component","id":3}]},"9":{"id":9,"text":"","title":"SQL 语句的执行过程","component":"interview","version":"","name":"run","url":"/interview/mysql/run.html","titles":[{"text":"Query","hash":"query","id":1},{"text":"Insert","hash":"insert","id":2},{"text":"Update","hash":"update","id":3},{"text":"Delete","hash":"delete","id":4}]},"10":{"id":10,"text":"String List Set ZSet Hash 引用知乎上一个高赞的回答来解释什么是I/O多路复用。假设你是一个老师，让30个学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择： 第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理socket，根本不具有并发能力。 第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。 这种类似于为每一个用户创建一个进程或者- 线程处理连接。 第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。 第一种就是阻塞IO模型，第三种就是I/O复用模型。 Redis 共有三种数据持久化的方式： AOF 日志：每执行一条写操作命令，就把该命令以追加的方式写入到一个文件里； RDB 快照：将某一时刻的内存数据，以二进制的方式写入磁盘； 混合持久化方式：Redis 4.0 新增的方式，集成了 AOF 和 RBD 的优点； Redis 在执行完一条写操作命令后，就会把该命令以追加的方式写入到一个文件里，然后 Redis 重启时，会读取该文件记录的命令，然后逐一执行命令的方式来进行数据恢复。 AOF日志记录的是操作命令，不是实际的数据，所以用 AOF 方法做故障恢复时，需要全量把日志都执行一遍，一旦 AOF 日志非常多，势必会造成 Redis 的恢复操作缓慢。 RDB 快照就是记录某一个瞬间的内存数据，记录的是实际数据。 Redis 的快照是全量快照，也就是说每次执行快照，都是把内存中的「所有数据」都记录到磁盘中。 Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave，他们的区别就在于是否在「主线程」里执行： 执行了 save 命令，就会在主线程生成 RDB 文件，由于和执行操作命令在同一个线程，所以如果写入 RDB 文件的时间太长，会阻塞主线程； 执行了 bgsave 命令，会创建一个子进程来生成 RDB 文件，这样可以避免主线程的阻塞； 当开启了混合持久化时，在 AOF 重写日志时，fork 出来的重写子进程会先将与主线程共享的内存数据以 RDB 方式写入到 AOF 文件，然后主线程处理的操作命令会被记录在重写缓冲区里，重写缓冲区里的增量命令会以 AOF 方式写入到 AOF 文件，写入完成后通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。 也就是说，使用了混合持久化，AOF 文件的前半部分是 RDB 格式的全量数据，后半部分是 AOF 格式的增量数据。 混合持久化优点： 混合持久化结合了 RDB 和 AOF 持久化的优点，开头为 RDB 的格式，使得 Redis 可以更快的启动，同时结合 AOF 的优点，有减低了大量数据丢失的风险。 混合持久化缺点： AOF 文件中添加了 RDB 格式的内容，使得 AOF 文件的可读性变得很差； 兼容性差，如果开启混合持久化，那么此混合持久化 AOF 文件，就不能用在 Redis 4.0 之前版本了。 每当我们对一个 key 设置了过期时间时，Redis 会把该 key 带上过期时间存储到一个过期字典（expires dict）中，也就是说「过期字典」保存了数据库中所有 key 的过期时间。 惰性删除策略 （访问时删） 不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。 定期删除策略（定时随机删） 每隔一段时间「随机」从数据库中取出一定数量的 key 进行检查，并删除其中的过期key。 默认每秒进行 10 次过期检查一次数据库，随机选择 20 个 key 判断是否过期。。 Redis 内存淘汰策略共有八种，这八种策略大体分为「不进行数据淘汰」和「进行数据淘汰」两类策略。 noeviction（Redis3.0之后，默认的内存淘汰策略） ：它表示当运行内存超过最大设置内存时，不淘汰任何数据，这时如果有新的数据写入，则会触发 OOM，但是如果没用数据写入的话，只是单纯的查询或者删除操作的话，还是可以正常工作。 针对「进行数据淘汰」这一类策略，又可以细分为「在设置了过期时间的数据中进行淘汰」和「在所有数据范围内进行淘汰」这两类策略。 在设置了过期时间的数据中进行淘汰： volatile-random：随机淘汰设置了过期时间的任意键值； volatile-ttl：优先淘汰更早过期的键值。 volatile-lru（Redis3.0 之前，默认的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最久未使用的键值； volatile-lfu（Redis 4.0 后新增的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最少使用的键值； 在所有数据范围内进行淘汰： allkeys-random：随机淘汰任意键值; allkeys-lru：淘汰整个键值中最久未使用的键值； allkeys-lfu（Redis 4.0 后新增的内存淘汰策略）：淘汰整个键值中最少使用的键值 缓存击穿 一个并发访问量比较大的key在某个时间过期，导致所有的请求直接打在DB上。 解决⽅案： 加锁更新，⽐如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写⼊缓存，再返回给⽤户，这样后⾯的请求就可以从缓存中拿到数据了。 缓存穿透 缓存穿透指的查询缓存和数据库中都不存在的数据，这样每次请求直接打到数据库，就好像缓存不存在一样 缓存穿透可能有两种原因： 自身业务代码问题 恶意攻击，爬虫造成空命中 它主要有两种解决办法： 缓存空值/默认值 一种方式是在数据库不命中之后，把一个空对象或者默认值保存到缓存，之后再访问这个数据，就会从缓存中获取，这样就保护了数据库。 需要更多的内存空间（如果是攻击，问题更严重） 缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。 布隆过滤器 除了缓存空对象，我们还可以在存储和缓存之前，加一个布隆过滤器，做一层过滤。 布隆过滤器里会保存数据是否存在，如果判断数据不不能再，就不会访问存储。 缓存雪崩 某⼀时刻发⽣⼤规模的缓存失效的情况，例如缓存服务宕机、大量key在同一时间过期，这样的后果就是⼤量的请求进来直接打到DB上，可能导致整个系统的崩溃，称为雪崩。 解决⽅案： 提高缓存可用性 集群部署：通过集群来提升缓存的可用性，可以利用Redis本身的Redis Cluster或者第三方集群方案如Codis等。 多级缓存：设置多级缓存，第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。 过期时间 均匀过期：为了避免大量的缓存在同一时间过期，可以把不同的 key 过期时间随机生成，避免过期时间太过集中。 热点数据永不过期。 熔断降级 服务熔断：当缓存服务器宕机或超时响应时，为了防止整个系统出现雪崩，暂时停止业务服务访问缓存系统。 服务降级：当出现大量缓存失效，而且处在高并发高负荷的情况下，在业务系统内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的 fallback（退路）错误处理信息。","title":"Redis","component":"interview","version":"","name":"index","url":"/interview/redis/index.html","titles":[{"text":"数据结构","hash":"数据结构","id":1},{"text":"I/O多路复用","hash":"io多路复用","id":2},{"text":"持久化","hash":"持久化","id":3},{"text":"AOF","hash":"aof","id":4},{"text":"RDB","hash":"rdb","id":5},{"text":"混合持久化方式","hash":"混合持久化方式","id":6},{"text":"过期删除与内存淘汰","hash":"过期删除与内存淘汰","id":7},{"text":"Redis 内存淘汰策略有哪些？","hash":"redis-内存淘汰策略有哪些","id":8},{"text":"不进行数据淘汰的策略","hash":"不进行数据淘汰的策略","id":9},{"text":"进行数据淘汰的策略","hash":"进行数据淘汰的策略","id":10},{"text":"缓存设计","hash":"缓存设计","id":11},{"text":"什么是缓存击穿、缓存穿透、缓存雪崩？","hash":"什么是缓存击穿缓存穿透缓存雪崩","id":12}]},"11":{"id":11,"text":"Java 中的字节码，是值 Java 源代码编译后的中间代码格式，一般称为字节码文件。 字节码文件中，一般包含以下部分： 版本号信息 静态常量池（符号常量） 类相关的信息 字段相关的信息 方法相关的信息 调试相关的信息 可以说，大部分信息都是通过常量池中的符号常量来表述的。 cd $HOME/Bunny/interview/docs/modules/java/attachments javac -g Hello.java javap -c -verbose Hello.class","title":"ByteCode","component":"interview","version":"","name":"bytecode","url":"/interview/java/jvm/bytecode.html","titles":[{"text":"字节码文件中包含哪些内容？","hash":"字节码文件中包含哪些内容","id":1},{"text":"Demo","hash":"demo","id":2}]},"12":{"id":12,"text":"ClassLoader 负责加载字节码文件即 class 文件，class 文件在文件开头有特定的文件标示，并且 ClassLoader 只负责class 文件的加载，至于它是否可以运行，则由 Execution Engine 决定。 Java 的类加载过程分为三个主要步骤：加载、链接、初始化。 加载（Loading） Java 将字节码数据从不同的数据源读取到 JVM 中， 并映射为 JVM 认可的数据结构(Class 对象)，这里的数据源可能是各种各样的形态，如 jar 文件、class 文件，甚至是网络数据源等;如果输入数据不是 ClassFile 的结构，则会抛 出 ClassFormatError。 加载阶段是用户参与的阶段，我们可以自定义类加载器，去实现自己的类加载过程。 链接（Linking） 验证(Verification) 这是虚拟机安全的重要保障，JVM 需要核验字节信息是符合 Java 虚拟机规范的，否则就被认为是 VerifyError，这样就防止了恶意信息或者不合规的 信息危害 JVM 的运行，验证阶段有可能触发更多 class 的加载。 准备(Preparation) 创建类或接口中的静态变量，并初始化静态变量的初始值。但这 里的“初始化”和下面的显式初始化阶段是有区别的，侧重点在于分配所需要的内存空 间，不会去执行更进一步的 JVM 指令。 解析(Resolution) 在这一步会将常量池中的符号引用(symbolic reference)替换 为直接引用。在Java 虚拟机规范中，详细介绍了类、接口、方法和字段等各个方面的解析。 初始化（Initialization） 这一步真正去执行类初始化的代码逻辑，包括静态字 段赋值的动作，以及执行类定义中的静态初始化块内的逻辑，编译器在编译阶段就会把这部 分逻辑整理好，父类型的初始化逻辑优先于当前类型的逻辑。 简单说就是当类加载器(Class-Loader)试图加载某个类型的时 候，除非父加载器找不到相应类型，否则尽量将这个任务代理给当前加载器的父加载器去 做。使用委派模型的目的是避免重复加载 Java 类型。 类加载器分类 Bootstrap Classloader 启动类加载器它主要负责加载JDK内部类，通常是位于$JAVA_HOME/jre/lib目录中的rt.jar和其他核心库。 启动类加载器充当所有其他ClassLoader实例的父实例。 启动类加载器是核心JVM的一部分，并且是用本机代码编写的。 Extension Classloader 扩展类加载器是启动类加载器的子类，负责加载标准核心Java类的扩展，以便平台上运行的所有应用程序都可以使用它们。 从JDK扩展目录加载，通常是$JAVA_HOME/lib/ext目录，或在java.ext.dirs系统属性中提到的任何其他目录。 Application Classloader(aka System Classloader) 应用程序类加载器负责将所有应用程序级别的类加载到JVM中。它加载在类路径环境变量、-classpath或-cp命令行选项中找到的文件。 它是Extension Classloader的子类。 Custom Classloader 自定义类加载器，大多数情况，内置的类加载器就足够了，部分场景需要用到自定义类加载器 帮助修改现有的字节码，例如编织代理 动态创建适合用户需求的类，例如在JDBC中，不同驱动程序实现之间的切换是通过动态类加载完成的。 实现类版本控制机制，同时为具有相同名称和包的类加载不同的字节码。这可以通过URL类加载器(通过URL加载JAR)或定制类加载器来完成。 打印不同的类加载器 import org.openjsse.legacy8ujsse.net.ssl.Legacy8uJSSE; import java.util.ArrayList; public class Scratch { public static void main(String[] args) { // Application Classloader System.out.println(\"Classloader of this class:\" + Scratch.class.getClassLoader()); // Extension Classloader System.out.println(\"Classloader of Legacy8uJSSE:\" + Legacy8uJSSE.class.getClassLoader()); // Bootstrap Classloader // print null, because is written in native code, not Java, so it doesn't show up as a Java class System.out.println(\"Classloader of ArrayList:\" + ArrayList.class.getClassLoader()); } } public class Scratch { public static void main(String[] args) { load(); } public static void load() { User u = new User(); u.getId(); } }","title":"Classloader","component":"interview","version":"","name":"classloader","url":"/interview/java/jvm/classloader.html","titles":[{"text":"类加载过程","hash":"类加载过程","id":1},{"text":"双亲委派机制","hash":"双亲委派机制","id":2},{"text":"类加载器","hash":"类加载器","id":3},{"text":"加载一个 .java 文件","hash":"加载一个-java-文件","id":4}]},"13":{"id":13,"text":"执行引擎，也叫 Interpreter。Class 文件被加载后，会把指令和数据信息放入内存中，Execution Engine 则负责把这些命令解释给操作系统，即将 JVM 指令集翻译为操作系统指令集。","title":"Execution Engine","component":"interview","version":"","name":"execution-engine","url":"/interview/java/jvm/execution-engine.html","titles":[]},"14":{"id":14,"text":"Figure 1. GC 的主要过程，出自阿里《码出高效-Java 开发手册》 Chapter 3-4. GC - Basics - JMM, Java Concurrency and JVM 标记 - 清除算法（Mark-Sweep） 复制算法（Coping） 标记整理算法（Mark-Compact） STW 停顿（Stop The World pause，全线暂停），让应用程序暂时停止，让 JVM 进行内存清理工作。 Mark-Sweep: 通常用於 tenured generation Copying: 通常用於 young generation Mark-Compact:通常用於 tenured generation Java 8 版本的 Hotspot JVM，默认情况下使用的是并行垃圾收集器（Parallel GC）。其他厂商提供的 JDK 8 基本上也默认使用并行垃圾收集器。 Java 9 之后，官方 JDK 默认使用的垃圾收集器是 G1。","title":"垃圾回收","component":"interview","version":"","name":"gc","url":"/interview/java/jvm/gc.html","titles":[{"text":"Minor GC v.s. Major GC v.s. Full GC","hash":"minor-gc-v-s-major-gc-v-s-full-gc","id":1},{"text":"GC 算法","hash":"gc-算法","id":2},{"text":"标记 - 清除算法（Mark-Sweep）","hash":"标记-清除算法mark-sweep","id":3},{"text":"复制算法（Coping）","hash":"复制算法coping","id":4},{"text":"标记整理算法（Mark-Compact）","hash":"标记整理算法mark-compact","id":5},{"text":"Summary","hash":"summary","id":6},{"text":"垃圾收集器","hash":"垃圾收集器","id":7}]},"15":{"id":15,"text":"Figure 1. Java 8 JDK(Java Development Kit) JDK 是 Java 环境的核心组件，提供了编译、调试和执行 Java 程序所需的所有工具、可执行文件和二进制文件。JDK 是特定于平台的软件，这就是为什么我们在 Windows、Mac 和 Unix 系统上有单独的安装程序。我们可以说 JDK 是 JRE 的超集，因为它包含带有 Java 编译器、调试器和核心类的 JRE 。 JRE(Java Runtime Environment) JRE 是 JVM 的实现。它提供了一个执行 Java 程序的平台。JRE 由 JVM、Java 二进制文件和其他类组成，可以成功执行任何程序。JRE 不包含任何开发工具，如`Java`编译器、调试器、JShell 等。如果您只想执行 Java 程序，可以只安装 JRE。 JVM(Java virtual machine) JVM 是 Java 编程语言的核心。当我们执行 Java 程序时，JVM 负责将字节码转换为机器专用代码。JVM 也是与平台相关的，并提供核心的 Java 功能，如内存管理、垃圾收集、安全等。JVM 是可定制的，我们可以使用Java选项来定制它。例如，为JVM分配最小和最大内存。JVM 之所以称为虚拟的，是因为它提供了一个不依赖于底层操作系统和机器硬件的接口。这种对硬件和操作系统的独立性使得Java程序可以随时随地编写一次运行。 JIT(Just-in-time Compiler) JIT 是 JVM 的一部分，它优化了将字节码转换为机器专用语言的过程。它同时编译相似的字节码，并将字节码编译为机器专用语言所需的总时间减少。 总结一下： JDK用于开发目的，而JRE用于运行Java程序。 JDK和JRE都包含JVM，因此我们可以运行Java程序。 JVM是Java编程语言的核心，并提供平台独立性。 Figure 2. JDK > JRE > JVM > JIT javac hello.java 使用 javac 命令编译.java 文件为.class文件 java hello 运行 .class 文件 启动一个 JVM 进程 java classloder 加载 class 到 JVM 内存 JVM 基于自己的字节码执行引擎，来执行加载到内存里的类","title":"Java Platform","component":"interview","version":"","name":"java-platform","url":"/interview/java/jvm/java-platform.html","titles":[{"text":"Overview","hash":"overview","id":1},{"text":"JDK vs JRE vs JVM vs JIT","hash":"jdk-vs-jre-vs-jvm-vs-jit","id":2},{"text":"一个 .java 文件的运行过程","hash":"一个-java-文件的运行过程","id":3}]},"16":{"id":16,"text":"JDK 自带的工具和程序可以分为 2 大类型： 开发工具 诊断分析工具 工具 简介 java Java 应用的启动程序 javac JDK 内置的编译工具 javap 反编译 class 文件的工具 javadoc 根据 Java 代码和标准注释，自动生成相关的 API 说明文档 javah JNI 开发时，根据 Java 代码生成需要的 .h 文件。 extcheck 检查某个 jar 文件和运行时扩展 jar 有没有版本冲突，很少使用 jdb Java Debugger 可以调试本地和远端程序，属于 JPDA 中的一个 Demo 实现，供其他调试器参考。开发时很少使用 jdeps 探测 class 或 jar 包需要的依赖 jar 打包工具，可以将文件和目录打包成为 .jar 文件；.jar 文件本质上就是 zip 文件，只是后缀不同。使用时按顺序对应好选项和参数即可。 keytool 安全证书和密钥的管理工具（支持生成、导入、导出等操作） jarsigner jar 文件签名和验证工具 policytool 实际上这是一款图形界面工具，管理本机的 Java 安全策略 类似 ps，用于展示 Java 进程信息（列表）。 jstat 用来监控 JVM 内置的各种统计信息，主要是内存和 GC 相关的信息。 jmap 主要用来 Dump 堆内存。 jcmd 是 JDK 8 推出的一款本地诊断工具，只支持连接本机上同一个用户空间下的 JVM 进程。用来来取代 jmap。 jstack 工具可以打印出 Java 线程的调用栈信息（Stack Trace）。一般用来查看存在哪些线程，诊断是否存在死锁等。 jinfo 用来查看具体生效的配置信息以及系统属性，还支持动态增加一部分参数。 可以用来执行 JS 代码 jrunscript 可以直接用来执行 JS 代码块或 JS 文件。 jjs 则只能交互模式，但是可以指定 JavaScript 支持的 ECMAScript 语言版本，比如 ES5 或者 ES6。 如果是 JDK 9 及以上的版本，则有一个更完善的 REPL 工具——JShell，可以直接解释执行 Java 代码。 JDK Development Tools","title":"JDK 内置命令行工具","component":"interview","version":"","name":"jdk-clt","url":"/interview/java/jvm/jdk-clt.html","titles":[{"text":"Dev Tools","hash":"dev-tools","id":1},{"text":"诊断分析工具","hash":"诊断分析工具","id":2},{"text":"jps","hash":"jps","id":3},{"text":"jstat","hash":"jstat","id":4},{"text":"jmap","hash":"jmap","id":5},{"text":"jcmd","hash":"jcmd","id":6},{"text":"jstack","hash":"jstack","id":7},{"text":"jinfo","hash":"jinfo","id":8},{"text":"jrunscript 和 jjs","hash":"jrunscript-和-jjs","id":9},{"text":"Ref","hash":"ref","id":10}]},"17":{"id":17,"text":"Runtime Data Area 是存放数据的，在逻辑上将内存划分为 线程栈（thread stacks）和堆内存 （heap）两个部分。 如下图所示： 总体来看，JVM 把内存划分为“栈(stack)”与“堆(heap)”两大类，为何要这样设计？ 个人理解，程序运行时，内存中的信息大致分为两类， 一是跟程序执行逻辑相关的指令数据，这类数据通常不大，而且生命周期短； 一是跟对象实例相关的数据，这类数据可能会很大，而且可以被多个线程长时间内反复共用，比如字符串常量、缓存对象这类。 堆内存又称为“共享堆”，堆中的所有对象，可以被所有线程访问, 只要他们能拿到对象的引用地址。 如果一个线程可以访问某个对象时，也就可以访问该对象的成员变量。 如果两个线程同时调用某个对象的同一方法，则它们都可以访问到这个对象的成员变量，但每个线程的局部变量副本是独立的。 堆 用来放置 Java 对象实例 堆是垃圾收集器重点照顾的区域 堆内空间还会被不同的垃圾收集器进行进一步的细分，如年轻代和老年代 年轻代是大部分对象创建和销毁的区域 分为新生代 Eden 区和两个存活区 Survivor 区（ From Survivor、To Survivor），比例 8:1:1 老年代是放置长生命周期的对象或者对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM 就会直接分配到老年代 非堆（aka 方法区、永久代、元空间） 用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。 每个正在运行的线程，都有自己的线程栈。 线程栈包含了当前正在执行的方法链/调用链上的所有方法的状态信息 ，是线程私有。 程序计数器 当前线程所执行的字节码的行号指示器 虚拟机栈 内部保存一个个的栈帧(Stack Frame)，对应着一次次的 Java 方法调用。 JVM 直接对 Java 栈的操作只有两个，就是对栈帧的压栈和出栈。 栈帧中存储着局部变量表、操作数(operand)栈、动态链接、方法正常退出或者异常退出的定义等。 本地方法栈 和 Java 虚拟机栈是非常相似的，支持对 本地方法的调用","title":"Runtime Data Area","component":"interview","version":"","name":"jmm","url":"/interview/java/jvm/jmm.html","titles":[{"text":"堆内存","hash":"堆内存","id":1},{"text":"线程栈","hash":"线程栈","id":2},{"text":"CPU指令乱序和内存屏障","hash":"cpu指令乱序和内存屏障","id":3}]},"18":{"id":18,"text":"直接通过命令行启动 Java 程序的格式为: java [options] classname [args] java [options] -jar filename [args] 其中: [options] 部分称为 “JVM 选项”，对应 IDE 中的 VM options, 可用 jps -v 查看。 [args] 部分是指 “传给main函数的参数”，对应 IDE 中的 Program arguments, 可用 jps -m 查看。 JVM 的启动参数, 从形式上可以简单分为： 以 - 开头为标准参数，所有的 JVM 都要实现这些参数，并且向后兼容。 以 -X 开头为非标准参数， 基本都是传给 JVM 的，默认 JVM 实现这些参数的功能，但是并不保证所有 JVM 实现都满足，且不保证向后兼容。 以 -XX: 开头为非稳定参数, 专门用于控制 JVM 的行为，跟具体的 JVM 实现有关，随时可能会在下个版本取消。 -XX:+-Flags 形式, +- 是对布尔值进行开关。 -XX:key=value 形式, 指定某个选项的值。 JVM 总内存 = 堆 + 栈 + 非堆 + 堆外内存。 -Xmx 指定最大堆内存。如 -Xmx4g。这只是限制了 Heap 部分的最大值为 4g。这个内存不包括栈内存，也不包括堆外使用的内存。 -Xms 指定堆内存空间的初始大小。 如 -Xms4g。 而且指定的内存大小，并不是操作系统实际分配的初始值，而是 GC 先规划好，用到才分配。 专用服务器上需要保持 -Xms 和 -Xmx 一致，否则应用刚启动可能就有好几个 FullGC。当两者配置不一致时，堆内存扩容可能会导致性能抖动。 -Xmn 等价于 -XX:NewSize，使用 G1 垃圾收集器 不应该 设置该选项，在其他的某些业务场景下可以设置。官方建议设置为 -Xmx 的 1/2 ~ 1/4。 -XX:MaxPermSize=size 这是 JDK1.7 之前使用的。Java8 默认允许的 Meta 空间无限大，此参数无效。 -XX:MaxMetaspaceSize=size Java8 默认不限制 Meta 空间, 一般不允许设置该选项。 XX:MaxDirectMemorySize=size 系统可以使用的最大堆外内存，这个参数跟 -Dsun.nio.MaxDirectMemorySize 效果相同。 -Xss 设置每个线程栈的字节数。 例如 -Xss1m 指定线程栈为 1MB，与 -XX:ThreadStackSize=1m 等价 Figure 1. 注：jdk8 开始，用 MetaSpace 区取代了 Perm 区（永久代），所以相应的 jvm 参数变成 -XX:MetaspaceSize 及 -XX:MaxMetaspaceSize 。 -XX:+UseG1GC ：使用 G1 垃圾回收器 -XX:+UseConcMarkSweepGC ：使用 CMS 垃圾回收器 -XX:+UseSerialGC ：使用串行垃圾回收器 -XX:+UseParallelGC ：使用并行垃圾回收器 Java HotSpot VM Options","title":"JVM 启动参数","component":"interview","version":"","name":"jvm-options","url":"/interview/java/jvm/jvm-options.html","titles":[{"text":"设置系统属性","hash":"设置系统属性","id":1},{"text":"Agent 相关的选项","hash":"agent-相关的选项","id":2},{"text":"JVM 运行模式","hash":"jvm-运行模式","id":3},{"text":"设置堆内存","hash":"设置堆内存","id":4},{"text":"GC 日志相关的参数","hash":"gc-日志相关的参数","id":5},{"text":"指定垃圾收集器相关参数","hash":"指定垃圾收集器相关参数","id":6},{"text":"特殊情况执行脚本的参数","hash":"特殊情况执行脚本的参数","id":7},{"text":"Ref","hash":"ref","id":8}]},"19":{"id":19,"text":"JVM 全称是 Java Virtual Machine，中文称为 Java 虚拟机。 JVM 是 Java 程序运行的底层平台，与 Java 支持库一起构成了 Java 程序的执行环境。 分为 JVM 规范和 JVM 实现两个部分。简单来说，Java 虚拟机就是指能执行标准 Java 字节码的虚拟计算机。 JVM 主要由四大部分组成： ClassLoader（类加载器） Runtime Data Area（运行时数据区，内存分区） Execution Engine（执行引擎） Native Interface（本地库接口）","title":"JVM","component":"interview","version":"","name":"jvm","url":"/interview/java/jvm/jvm.html","titles":[{"text":"JVM 组成","hash":"jvm-组成","id":1}]},"20":{"id":20,"text":"负责调用本地接口的。他的作用是调用不同语言的接口给 JAVA 用，他会在 Native Method Stack 中记录对应的本地方法，然后调用该方法时就通过 Execution Engine 加载对应的本地 lib。原本多用于一些专业领域，如JAVA驱动，地图制作引擎等，现在关于这种本地方法接口的调用已经被类似于Socket通信，WebService等方式取代。","title":"Native Interface","component":"interview","version":"","name":"native-interface","url":"/interview/java/jvm/native-interface.html","titles":[]},"21":{"id":21,"text":"Table 1. heap 新生代 (1/3堆空间) 老生代 (2/3堆空间) Eden (8/10) From Survivor (1/10) To Survivor (1/10) 降低老年代的内存分配压力,通过设置两个s区来对年轻对象进行拦截,降低fullGc的次数 分三代能使老年代作为担保来应付s区容不下存活对象的情况 回收基于 标记-复制算法 每个新对象先进入 Eden 第一次 MinorGC 存活的对象由 Eden 进入 From Survivor，清空 Eden 第二次 MinorGC 存活的对象由 Eden、From Survivor 进入 To Survivor，清空 Eden、From Survivor 第三次 MinorGC 存活的对象由 Eden、To Survivor 进入 From Survivor，清空 Eden、To Survivor 如此反复三四步直到对象年龄达标或者 Survivor 区容不下存活对象时晋升到老年代 深入理解虚拟机一书里有描述,IBM的一项研究,表明新生代中有98%的对象是朝生夕灭的,换言之,每次mionrGC后存活的对象应该小于等于2%， 所以看起来采用复制算法的新生代似乎可以不用将内存分成大小相等的两块了,但考虑到实验偏差以及实际情况的多样性, jvm 默认预留了10%的内存用于存放存活对象,此时结合上文描述的,新生代最优应该分成三块,所以得再预留一块10%的内存给s区,那么自然剩下的80%就是e区的大小了；","title":"Q&A","component":"interview","version":"","name":"qa","url":"/interview/java/jvm/qa.html","titles":[{"text":"年轻代为什么分三个区","hash":"年轻代为什么分三个区","id":1},{"text":"年轻代三个区比例为什么是 8:1:1","hash":"年轻代三个区比例为什么是-811","id":2}]},"22":{"id":22,"text":"JVM 核心技术 32 讲（完）","title":"Ref","component":"interview","version":"","name":"ref","url":"/interview/java/jvm/ref.html","titles":[]},"23":{"id":23,"text":"","title":"AOP","component":"interview","version":"","name":"aop","url":"/interview/java/spring/aop.html","titles":[]},"24":{"id":24,"text":"Ioc(Inversion of Control) 控制反转，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。 DI(Dependency Injection) 依赖注入，组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。 IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。 控制反转是通过依赖注入实现的，其实它们是同一个概念的不同角度描述。通俗来说就是IoC是设计思想，DI是实现方式。 @Autowired是Spring自带的，@Resource是JSR250规范实现的，@Inject是JSR330规范实现的 @Autowired、@Inject用法基本一样，不同的是@Inject没有required属性 @Autowired、@Inject是默认按照类型匹配的，@Resource是按照名称匹配的 @Autowired如果需要按照名称匹配需要和@Qualifier一起使用，@Inject和@Named一起使用，@Resource则通过name进行指定","title":"IOC and DI","component":"interview","version":"","name":"ioc","url":"/interview/java/spring/ioc.html","titles":[{"text":"@Autowired vs @Resource vs @Inject","hash":"autowired-vs-resource-vs-inject","id":1}]},"25":{"id":25,"text":"","title":"Spring Boot 启动流程","component":"interview","version":"","name":"spring-boot-start","url":"/interview/java/spring/spring-boot-start.html","titles":[]}},"components":{},"componentVersions":{"interview/":{"displayVersion":"default","title":"Interview","version":"","name":"interview","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlightjs-ext","site-title":"Implicated","site-url":"https://docs.implicated.com","experimental":"","page-pagination":"","idprefix":"","idseparator":"-","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{},{"VERSION":"0.4.0"}]},"url":"/interview/index.html","navigation":[{"items":[{"content":"Java Interview","url":"/interview/index.html","urlType":"internal"}],"root":true,"order":0},{"items":[{"content":"Java","items":[{"content":"JDK 源码","items":[{"content":"<a href=\"https://implicated.github.io/jdk-docs/index.html\" target=\"_blank\" rel=\"noopener\">手动编译 JDK 源码</a>"}]},{"content":"并发编程"},{"content":"JVM","items":[{"content":"Java Platform","url":"/interview/java/jvm/java-platform.html","urlType":"internal"},{"content":"ByteCode","url":"/interview/java/jvm/bytecode.html","urlType":"internal"},{"content":"JVM","url":"/interview/java/jvm/jvm.html","urlType":"internal","items":[{"content":"Classloader","url":"/interview/java/jvm/classloader.html","urlType":"internal"},{"content":"Execution Engine","url":"/interview/java/jvm/execution-engine.html","urlType":"internal"},{"content":"Native Interface","url":"/interview/java/jvm/native-interface.html","urlType":"internal"},{"content":"Runtime Data Area","url":"/interview/java/jvm/jmm.html","urlType":"internal"}]},{"content":"JVM 启动参数","url":"/interview/java/jvm/jvm-options.html","urlType":"internal"},{"content":"垃圾回收","url":"/interview/java/jvm/gc.html","urlType":"internal"},{"content":"JDK 内置命令行工具","url":"/interview/java/jvm/jdk-clt.html","urlType":"internal"},{"content":"Q&amp;A","url":"/interview/java/jvm/qa.html","urlType":"internal"},{"content":"Ref","url":"/interview/java/jvm/ref.html","urlType":"internal"}]}]},{"content":"Java 框架","items":[{"content":"Spring","items":[{"content":"IOC and DI","url":"/interview/java/spring/ioc.html","urlType":"internal"},{"content":"AOP","url":"/interview/java/spring/aop.html","urlType":"internal"}]},{"content":"Spring Boot","items":[{"content":"Spring Boot 启动流程","url":"/interview/java/spring/spring-boot-start.html","urlType":"internal"}]}]}],"root":true,"order":1},{"items":[{"content":"MySQL","items":[{"content":"SQL 语句的执行过程","url":"/interview/mysql/run.html","urlType":"internal"},{"content":"Log","url":"/interview/mysql/log.html","urlType":"internal"},{"content":"索引","url":"/interview/mysql/index.html","urlType":"internal"},{"content":"architecture","items":[{"content":"InnoDB","url":"/interview/mysql/innodb.html","urlType":"internal"}]}]}],"root":true,"order":2}]}}}})