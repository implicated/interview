antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1",[0,16.182,1,10.24]],["name/1",[2,0.914]],["text/1",[0,1.116,3,0.533,4,1.01,5,2.669,6,1.243,7,1.615,8,1.402,9,2.177,10,1.615,11,1.93,12,3.075,13,2.508,14,1.939,15,1.939,16,1.939,17,1.939,18,1.939,19,1.939,20,1.939,21,1.615,22,1.615,23,1.939,24,1.939,25,1.939,26,1.939,27,1.939,28,1.615,29,1.939,30,1.939,31,1.939]],["component/1",[1,0.557]],["title/2",[12,30.366]],["name/2",[2,0.914]],["text/2",[]],["component/2",[1,0.557]],["title/3-1",[4,6.836,32,10.935,33,20.486,34,10.935,35,10.935]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[0,13.172,3,3.447]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[3,2.837,4,14.647]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[3,3.677]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[3,3.677]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[3,3.677]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3-7",[0,13.172,3,3.447]],["name/3-7",[]],["text/3-7",[]],["component/3-7",[]],["title/3",[4,18.985]],["name/3",[4,0.914]],["text/3",[0,2.473,3,0.598,4,2.061,22,0.357,28,0.67,32,1.421,33,0.824,34,1.974,35,0.949,36,0.428,37,0.428,38,0.428,39,0.428,40,0.428,41,0.428,42,0.428,43,0.428,44,0.428,45,0.428,46,0.428,47,0.428,48,0.428,49,0.428,50,0.428,51,0.428,52,0.428,53,0.428,54,0.428,55,0.428,56,0.428,57,0.428,58,0.428,59,0.428,60,0.805,61,0.428,62,2.878,63,0.428,64,0.428,65,0.428,66,0.428,67,0.428,68,1.139,69,0.428,70,0.428,71,0.428,72,0.428,73,0.428,74,0.428,75,0.428,76,0.428,77,0.428,78,0.428,79,0.428,80,0.805,81,2.553,82,0.428,83,1.139,84,0.428,85,0.805,86,0.428,87,0.428,88,0.428,89,0.428,90,0.428,91,0.428,92,0.428,93,0.805,94,0.428,95,0.428,96,1.706,97,0.805,98,1.139,99,1.139,100,0.805,101,0.805,102,1.139,103,0.428,104,0.428,105,0.428,106,0.428,107,0.428,108,0.428,109,0.428,110,0.428,111,0.428,112,0.428,113,0.428,114,0.428,115,0.428,116,0.428,117,0.428,118,0.428]],["component/3",[1,0.557]],["title/4",[13,30.366]],["name/4",[2,0.914]],["text/4",[]],["component/4",[1,0.557]],["title/5-1",[3,3.677]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[119,36.45]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5",[3,3.677]],["name/5",[2,0.914]],["text/5",[2,1.455,3,0.602,10,2.327,120,2.793,121,2.793,122,2.793,123,2.793,124,2.793,125,3.948,126,2.793,127,2.793,128,2.793]],["component/5",[1,0.557]],["title/6-1",[3,3.677]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[129,36.45]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[3,3.677]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[130,30.366]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[131,30.366]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[3,3.677]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[3,3.677]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[3,2.837,11,18.026]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[3,3.677]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6-10",[3,3.677]],["name/6-10",[]],["text/6-10",[]],["component/6-10",[]],["title/6-11",[3,3.677]],["name/6-11",[]],["text/6-11",[]],["component/6-11",[]],["title/6-12",[3,3.677]],["name/6-12",[]],["text/6-12",[]],["component/6-12",[]],["title/6",[11,23.365]],["name/6",[2,0.914]],["text/6",[3,0.618,11,2.276,21,1.619,130,3.693,131,3.079,132,0.62,133,0.62,134,0.62,135,0.62,136,0.62,137,0.62,138,0.62,139,0.62,140,0.62,141,0.62,142,0.62,143,1.136,144,1.136,145,0.62,146,3.39,147,0.62,148,0.62,149,0.62,150,0.62,151,0.62,152,0.62,153,1.943,154,1.136,155,0.62,156,0.62,157,1.136,158,1.571,159,0.62,160,0.62,161,0.62,162,0.62,163,0.62,164,0.62,165,0.62]],["component/6",[1,0.557]],["title/7",[8,26.358]],["name/7",[8,1.269]],["text/7",[]],["component/7",[1,0.557]],["title/8-1",[33,19.338,166,16.684,167,16.684,168,13.899]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8",[6,18.026,7,23.427]],["name/8",[6,1.125]],["text/8",[3,0.464,6,2.239,168,2.91,169,3.493,170,3.493,171,3.493,172,3.493,173,3.493,174,3.493,175,3.493,176,3.493,177,3.493]],["component/8",[1,0.557]],["title/9",[3,2.309,5,16.553,9,16.553]],["name/9",[5,0.546,9,0.546,178,0.756]],["text/9",[]],["component/9",[1,0.557]]],"invertedIndex":[["",{"_index":3,"title":{"5":{},"9":{},"3-2":{},"3-3":{},"3-4":{},"3-5":{},"3-6":{},"3-7":{},"5-1":{},"6-1":{},"6-3":{},"6-6":{},"6-7":{},"6-8":{},"6-9":{},"6-10":{},"6-11":{},"6-12":{}},"name":{},"text":{"1":{},"3":{},"5":{},"6":{},"8":{}},"component":{}}],["1",{"_index":59,"title":{},"name":{},"text":{"3":{}},"component":{}}],["10",{"_index":149,"title":{},"name":{},"text":{"6":{}},"component":{}}],["2.2.2.release(2.3.5.releas",{"_index":24,"title":{},"name":{},"text":{"1":{}},"component":{}}],["20",{"_index":150,"title":{},"name":{},"text":{"6":{}},"component":{}}],["30",{"_index":139,"title":{},"name":{},"text":{"6":{}},"component":{}}],["4.0",{"_index":21,"title":{},"name":{},"text":{"1":{},"6":{}},"component":{}}],["5.0.5",{"_index":16,"title":{},"name":{},"text":{"1":{}},"component":{}}],["5.7.30",{"_index":18,"title":{},"name":{},"text":{"1":{}},"component":{}}],["6.8.5(7.6.2",{"_index":25,"title":{},"name":{},"text":{"1":{}},"component":{}}],["7.4.0",{"_index":20,"title":{},"name":{},"text":{"1":{}},"component":{}}],["allkey",{"_index":158,"title":{},"name":{},"text":{"6":{}},"component":{}}],["all代替union",{"_index":123,"title":{},"name":{},"text":{"5":{}},"component":{}}],["aof",{"_index":130,"title":{"6-4":{}},"name":{},"text":{"6":{}},"component":{}}],["aop",{"_index":8,"title":{"7":{}},"name":{"7":{}},"text":{"1":{}},"component":{}}],["applic",{"_index":85,"title":{},"name":{},"text":{"3":{}},"component":{}}],["arch",{"_index":30,"title":{},"name":{},"text":{"1":{}},"component":{}}],["arg",{"_index":101,"title":{},"name":{},"text":{"3":{}},"component":{}}],["arraylist",{"_index":114,"title":{},"name":{},"text":{"3":{}},"component":{}}],["arraylist.class.getclassload",{"_index":115,"title":{},"name":{},"text":{"3":{}},"component":{}}],["autowir",{"_index":166,"title":{"8-1":{}},"name":{},"text":{},"component":{}}],["autowired、@inject是默认按照类型匹配的，@resourc",{"_index":176,"title":{},"name":{},"text":{"8":{}},"component":{}}],["autowired、@inject用法基本一样，不同的是@inject没有requir",{"_index":175,"title":{},"name":{},"text":{"8":{}},"component":{}}],["autowired如果需要按照名称匹配需要和@qualifier一起使用，@inject和@named一起使用，@resource则通过nam",{"_index":177,"title":{},"name":{},"text":{"8":{}},"component":{}}],["autowired是spring自带的，@resource是jsr250规范实现的，@inject是jsr330",{"_index":174,"title":{},"name":{},"text":{"8":{}},"component":{}}],["a，发现缓存中没有，对a这个key",{"_index":161,"title":{},"name":{},"text":{"6":{}},"component":{}}],["a，然后是b，之后是c、d。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理socket",{"_index":138,"title":{},"name":{},"text":{"6":{}},"component":{}}],["bgsave",{"_index":144,"title":{},"name":{},"text":{"6":{}},"component":{}}],["boot",{"_index":9,"title":{"9":{}},"name":{"9":{}},"text":{"1":{}},"component":{}}],["bootstrap",{"_index":80,"title":{},"name":{},"text":{"3":{}},"component":{}}],["class",{"_index":62,"title":{},"name":{},"text":{"3":{}},"component":{}}],["classfil",{"_index":69,"title":{},"name":{},"text":{"3":{}},"component":{}}],["classformaterror",{"_index":70,"title":{},"name":{},"text":{"3":{}},"component":{}}],["classload",{"_index":81,"title":{},"name":{},"text":{"3":{}},"component":{}}],["classloader(aka",{"_index":86,"title":{},"name":{},"text":{"3":{}},"component":{}}],["classlod",{"_index":64,"title":{},"name":{},"text":{"3":{}},"component":{}}],["classpath",{"_index":88,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cluster或者第三方集群方案如codi",{"_index":164,"title":{},"name":{},"text":{"6":{}},"component":{}}],["code",{"_index":110,"title":{},"name":{},"text":{"3":{}},"component":{}}],["compil",{"_index":54,"title":{},"name":{},"text":{"3":{}},"component":{}}],["content",{"_index":37,"title":{},"name":{},"text":{"3":{}},"component":{}}],["control",{"_index":170,"title":{},"name":{},"text":{"8":{}},"component":{}}],["cp",{"_index":89,"title":{},"name":{},"text":{"3":{}},"component":{}}],["custom",{"_index":90,"title":{},"name":{},"text":{"3":{}},"component":{}}],["c、d举手，表示他们解答问题完毕，你下去依次检查c、d的答案，然后继续回到讲台上等。此时e、a又举手，然后去处理e和a",{"_index":140,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ddd",{"_index":26,"title":{},"name":{},"text":{"1":{}},"component":{}}],["develop",{"_index":39,"title":{},"name":{},"text":{"3":{}},"component":{}}],["di",{"_index":7,"title":{"8":{}},"name":{},"text":{"1":{}},"component":{}}],["di(depend",{"_index":172,"title":{},"name":{},"text":{"8":{}},"component":{}}],["dict",{"_index":148,"title":{},"name":{},"text":{"6":{}},"component":{}}],["docker",{"_index":14,"title":{},"name":{},"text":{"1":{}},"component":{}}],["doesn't",{"_index":111,"title":{},"name":{},"text":{"3":{}},"component":{}}],["elasticsearch",{"_index":12,"title":{"2":{}},"name":{},"text":{"1":{}},"component":{}}],["environ",{"_index":45,"title":{},"name":{},"text":{"3":{}},"component":{}}],["expir",{"_index":147,"title":{},"name":{},"text":{"6":{}},"component":{}}],["extens",{"_index":83,"title":{},"name":{},"text":{"3":{}},"component":{}}],["fallback",{"_index":165,"title":{},"name":{},"text":{"6":{}},"component":{}}],["figur",{"_index":58,"title":{},"name":{},"text":{"3":{}},"component":{}}],["forc",{"_index":120,"title":{},"name":{},"text":{"5":{}},"component":{}}],["fork",{"_index":145,"title":{},"name":{},"text":{"6":{}},"component":{}}],["frame",{"_index":66,"title":{},"name":{},"text":{"3":{}},"component":{}}],["group",{"_index":126,"title":{},"name":{},"text":{"5":{}},"component":{}}],["hash",{"_index":136,"title":{},"name":{},"text":{"6":{}},"component":{}}],["hello",{"_index":63,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hello.java",{"_index":61,"title":{},"name":{},"text":{"3":{}},"component":{}}],["i/o",{"_index":129,"title":{"6-2":{}},"name":{},"text":{},"component":{}}],["i/o多路复用。假设你是一个老师，让30",{"_index":137,"title":{},"name":{},"text":{"6":{}},"component":{}}],["import",{"_index":93,"title":{},"name":{},"text":{"3":{}},"component":{}}],["index",{"_index":2,"title":{},"name":{"1":{},"2":{},"4":{},"5":{},"6":{}},"text":{"5":{}},"component":{}}],["initi",{"_index":78,"title":{},"name":{},"text":{"3":{}},"component":{}}],["inject",{"_index":168,"title":{"8-1":{}},"name":{},"text":{"8":{}},"component":{}}],["interview",{"_index":1,"title":{"1":{}},"name":{},"text":{},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{}}}],["ioc",{"_index":6,"title":{"8":{}},"name":{"8":{}},"text":{"1":{},"8":{}},"component":{}}],["ioc(invers",{"_index":169,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ioc是设计思想，di",{"_index":173,"title":{},"name":{},"text":{"8":{}},"component":{}}],["io模型，第三种就是i/o",{"_index":141,"title":{},"name":{},"text":{"6":{}},"component":{}}],["jar",{"_index":22,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["java",{"_index":0,"title":{"1":{},"3-2":{},"3-7":{}},"name":{},"text":{"1":{},"3":{}},"component":{}}],["java.util.arraylist",{"_index":95,"title":{},"name":{},"text":{"3":{}},"component":{}}],["java`编译器、调试器、jshel",{"_index":47,"title":{},"name":{},"text":{"3":{}},"component":{}}],["javac",{"_index":60,"title":{},"name":{},"text":{"3":{}},"component":{}}],["java开发中，ioc",{"_index":171,"title":{},"name":{},"text":{"8":{}},"component":{}}],["java选项来定制它。例如，为jvm分配最小和最大内存。jvm",{"_index":51,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jdbc",{"_index":91,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jdk",{"_index":32,"title":{"3-1":{}},"name":{},"text":{"3":{}},"component":{}}],["jdk(java",{"_index":38,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jdk内部类，通常是位于$java_home/jre/lib目录中的rt.jar",{"_index":82,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jdk和jre都包含jvm，因此我们可以运行java",{"_index":56,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jdk扩展目录加载，通常是$java_home/lib/ext目录，或在java.ext.dir",{"_index":84,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jdk用于开发目的，而jre用于运行java",{"_index":55,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jit",{"_index":35,"title":{"3-1":{}},"name":{},"text":{"3":{}},"component":{}}],["jit(just",{"_index":52,"title":{},"name":{},"text":{"3":{}},"component":{}}],["join",{"_index":125,"title":{},"name":{},"text":{"5":{}},"component":{}}],["jre",{"_index":34,"title":{"3-1":{}},"name":{},"text":{"3":{}},"component":{}}],["jre(java",{"_index":43,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jvm",{"_index":4,"title":{"3":{},"3-1":{},"3-3":{}},"name":{"3":{}},"text":{"1":{},"3":{}},"component":{}}],["jvm(java",{"_index":48,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jvm、java",{"_index":46,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jvm是java",{"_index":57,"title":{},"name":{},"text":{"3":{}},"component":{}}],["k8",{"_index":15,"title":{},"name":{},"text":{"1":{}},"component":{}}],["key",{"_index":146,"title":{},"name":{},"text":{"6":{}},"component":{}}],["key在同一时间过期，这样的后果就是⼤量的请求进来直接打到db",{"_index":162,"title":{},"name":{},"text":{"6":{}},"component":{}}],["key在某个时间过期，导致所有的请求直接打在db",{"_index":160,"title":{},"name":{},"text":{"6":{}},"component":{}}],["kit",{"_index":40,"title":{},"name":{},"text":{"3":{}},"component":{}}],["legacy8ujss",{"_index":104,"title":{},"name":{},"text":{"3":{}},"component":{}}],["legacy8ujsse.class.getclassload",{"_index":105,"title":{},"name":{},"text":{"3":{}},"component":{}}],["lfu（redi",{"_index":157,"title":{},"name":{},"text":{"6":{}},"component":{}}],["limit",{"_index":124,"title":{},"name":{},"text":{"5":{}},"component":{}}],["link",{"_index":71,"title":{},"name":{},"text":{"3":{}},"component":{}}],["list",{"_index":133,"title":{},"name":{},"text":{"6":{}},"component":{}}],["load",{"_index":68,"title":{},"name":{},"text":{"3":{}},"component":{}}],["loader",{"_index":79,"title":{},"name":{},"text":{"3":{}},"component":{}}],["log",{"_index":19,"title":{},"name":{},"text":{"1":{}},"component":{}}],["lru",{"_index":159,"title":{},"name":{},"text":{"6":{}},"component":{}}],["lru（redis3.0",{"_index":156,"title":{},"name":{},"text":{"6":{}},"component":{}}],["machin",{"_index":50,"title":{},"name":{},"text":{"3":{}},"component":{}}],["main(str",{"_index":100,"title":{},"name":{},"text":{"3":{}},"component":{}}],["more",{"_index":128,"title":{},"name":{},"text":{"5":{}},"component":{}}],["mqsql",{"_index":17,"title":{},"name":{},"text":{"1":{}},"component":{}}],["mysql",{"_index":10,"title":{},"name":{},"text":{"1":{},"5":{}},"component":{}}],["nativ",{"_index":109,"title":{},"name":{},"text":{"3":{}},"component":{}}],["new",{"_index":117,"title":{},"name":{},"text":{"3":{}},"component":{}}],["noeviction（redis3.0",{"_index":151,"title":{},"name":{},"text":{"6":{}},"component":{}}],["null",{"_index":107,"title":{},"name":{},"text":{"3":{}},"component":{}}],["oom",{"_index":152,"title":{},"name":{},"text":{"6":{}},"component":{}}],["operand",{"_index":67,"title":{},"name":{},"text":{"3":{}},"component":{}}],["org.openjsse.legacy8ujsse.net.ssl.legacy8ujss",{"_index":94,"title":{},"name":{},"text":{"3":{}},"component":{}}],["prepar",{"_index":74,"title":{},"name":{},"text":{"3":{}},"component":{}}],["print",{"_index":106,"title":{},"name":{},"text":{"3":{}},"component":{}}],["product",{"_index":29,"title":{},"name":{},"text":{"1":{}},"component":{}}],["public",{"_index":96,"title":{},"name":{},"text":{"3":{}},"component":{}}],["random",{"_index":154,"title":{},"name":{},"text":{"6":{}},"component":{}}],["rbd",{"_index":142,"title":{},"name":{},"text":{"6":{}},"component":{}}],["rdb",{"_index":131,"title":{"6-5":{}},"name":{},"text":{"6":{}},"component":{}}],["read",{"_index":127,"title":{},"name":{},"text":{"5":{}},"component":{}}],["redi",{"_index":11,"title":{"6":{},"6-8":{}},"name":{},"text":{"1":{},"6":{}},"component":{}}],["redis本身的redi",{"_index":163,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ref",{"_index":31,"title":{},"name":{},"text":{"1":{}},"component":{}}],["refer",{"_index":77,"title":{},"name":{},"text":{"3":{}},"component":{}}],["resolut",{"_index":75,"title":{},"name":{},"text":{"3":{}},"component":{}}],["resourc",{"_index":167,"title":{"8-1":{}},"name":{},"text":{},"component":{}}],["rocketmq",{"_index":13,"title":{"4":{}},"name":{},"text":{"1":{}},"component":{}}],["runtim",{"_index":44,"title":{},"name":{},"text":{"3":{}},"component":{}}],["save",{"_index":143,"title":{},"name":{},"text":{"6":{}},"component":{}}],["scratch",{"_index":97,"title":{},"name":{},"text":{"3":{}},"component":{}}],["scratch.class.getclassload",{"_index":103,"title":{},"name":{},"text":{"3":{}},"component":{}}],["select",{"_index":121,"title":{},"name":{},"text":{"5":{}},"component":{}}],["set",{"_index":134,"title":{},"name":{},"text":{"6":{}},"component":{}}],["show",{"_index":112,"title":{},"name":{},"text":{"3":{}},"component":{}}],["spring",{"_index":5,"title":{"9":{}},"name":{"9":{}},"text":{"1":{}},"component":{}}],["springboot",{"_index":23,"title":{},"name":{},"text":{"1":{}},"component":{}}],["sql",{"_index":119,"title":{"5-2":{}},"name":{},"text":{},"component":{}}],["stack",{"_index":65,"title":{},"name":{},"text":{"3":{}},"component":{}}],["start",{"_index":178,"title":{},"name":{"9":{}},"text":{},"component":{}}],["static",{"_index":98,"title":{},"name":{},"text":{"3":{}},"component":{}}],["string",{"_index":132,"title":{},"name":{},"text":{"6":{}},"component":{}}],["symbol",{"_index":76,"title":{},"name":{},"text":{"3":{}},"component":{}}],["system",{"_index":87,"title":{},"name":{},"text":{"3":{}},"component":{}}],["system.out.println(\"classload",{"_index":102,"title":{},"name":{},"text":{"3":{}},"component":{}}],["tabl",{"_index":36,"title":{},"name":{},"text":{"3":{}},"component":{}}],["time",{"_index":53,"title":{},"name":{},"text":{"3":{}},"component":{}}],["trade",{"_index":27,"title":{},"name":{},"text":{"1":{}},"component":{}}],["ttl",{"_index":155,"title":{},"name":{},"text":{"6":{}},"component":{}}],["u",{"_index":116,"title":{},"name":{},"text":{"3":{}},"component":{}}],["u.getid",{"_index":118,"title":{},"name":{},"text":{"3":{}},"component":{}}],["union",{"_index":122,"title":{},"name":{},"text":{"5":{}},"component":{}}],["unix",{"_index":42,"title":{},"name":{},"text":{"3":{}},"component":{}}],["up",{"_index":113,"title":{},"name":{},"text":{"3":{}},"component":{}}],["url类加载器(通过url加载jar",{"_index":92,"title":{},"name":{},"text":{"3":{}},"component":{}}],["user",{"_index":28,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["verif",{"_index":72,"title":{},"name":{},"text":{"3":{}},"component":{}}],["verifyerror",{"_index":73,"title":{},"name":{},"text":{"3":{}},"component":{}}],["virtual",{"_index":49,"title":{},"name":{},"text":{"3":{}},"component":{}}],["void",{"_index":99,"title":{},"name":{},"text":{"3":{}},"component":{}}],["volatil",{"_index":153,"title":{},"name":{},"text":{"6":{}},"component":{}}],["vs",{"_index":33,"title":{"3-1":{},"8-1":{}},"name":{},"text":{"3":{}},"component":{}}],["windows、mac",{"_index":41,"title":{},"name":{},"text":{"3":{}},"component":{}}],["written",{"_index":108,"title":{},"name":{},"text":{"3":{}},"component":{}}],["zset",{"_index":135,"title":{},"name":{},"text":{"6":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"Java 并发 JVM Spring IOC and DI AOP Spring Boot Spring Boot 启动流程 MySQL 索引 中间件 Redis ElasticSearch RocketMQ 容器 docker k8s 使用版本 中间件 Redis: 5.0.5 MqSQL: 5.7.30-log ElasticSearch: 7.4.0 商业版 RocketMQ: 4.0系列 标准版 jar SpringBoot: 2.2.2.RELEASE(2.3.5.RELEASE) ElasticSearch: 6.8.5(7.6.2) DDD 核心域：trade user product 通用域：arch 支撑域：ref","title":"Java Interview","component":"interview","version":"","name":"index","url":"/interview/index.html","titles":[]},"2":{"id":2,"text":"","title":"ElasticSearch","component":"interview","version":"","name":"index","url":"/interview/elastic/index.html","titles":[]},"3":{"id":3,"text":"Table of Contents JDK vs JRE vs JVM vs JIT 一个 .java 文件的运行过程 JVM 组成 类加载过程 双亲委派机制 类加载器 加载一个 .java 文件 JDK(Java Development Kit) JDK 是 Java 环境的核心组件，提供了编译、调试和执行 Java 程序所需的所有工具、可执行文件和二进制文件。JDK 是特定于平台的软件，这就是为什么我们在 Windows、Mac 和 Unix 系统上有单独的安装程序。我们可以说 JDK 是 JRE 的超集，因为它包含带有 Java 编译器、调试器和核心类的 JRE 。 JRE(Java Runtime Environment) JRE 是 JVM 的实现。它提供了一个执行 Java 程序的平台。JRE 由 JVM、Java 二进制文件和其他类组成，可以成功执行任何程序。JRE 不包含任何开发工具，如`Java`编译器、调试器、JShell 等。如果您只想执行 Java 程序，可以只安装 JRE。 JVM(Java virtual machine) JVM 是 Java 编程语言的核心。当我们执行 Java 程序时，JVM 负责将字节码转换为机器专用代码。JVM 也是与平台相关的，并提供核心的 Java 功能，如内存管理、垃圾收集、安全等。JVM 是可定制的，我们可以使用Java选项来定制它。例如，为JVM分配最小和最大内存。JVM 之所以称为虚拟的，是因为它提供了一个不依赖于底层操作系统和机器硬件的接口。这种对硬件和操作系统的独立性使得Java程序可以随时随地编写一次运行。 JIT(Just-in-time Compiler) JIT 是 JVM 的一部分，它优化了将字节码转换为机器专用语言的过程。它同时编译相似的字节码，并将字节码编译为机器专用语言所需的总时间减少。 总结一下： JDK用于开发目的，而JRE用于运行Java程序。 JDK和JRE都包含JVM，因此我们可以运行Java程序。 JVM是Java编程语言的核心，并提供平台独立性。 Figure 1. JDK > JRE > JVM > JIT javac hello.java 使用 javac 命令编译.java 文件为.class文件 java hello 运行 .class 文件 启动一个 JVM 进程 java classloder 加载 class 到 JVM 内存 JVM 基于自己的字节码执行引擎，来执行加载到内存里的类 线程共享 堆 用来放置 Java 对象实例 堆是垃圾收集器重点照顾的区域 堆内空间还会被不同的垃圾收集器进行进一步的细分，如新生代和老年代 新生代是大部分对象创建和销毁的区域 老年代是放置长生命周期的对象或者对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM 就会直接分配到老年代 方法区 用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。 线程私有 程序计数器 当前线程所执行的字节码的行号指示器 虚拟机栈 内部保存一个个的栈帧(Stack Frame)，对应着一次次的 Java 方法调用。 JVM 直接对 Java 栈的操作只有两个，就是对栈帧的压栈和出栈。 栈帧中存储着局部变量表、操作数(operand)栈、动态链接、方法正常退出或者异常退出的定义等。 本地方法栈 和 Java 虚拟机栈是非常相似的，支持对 本地方法的调用 Java 的类加载过程分为三个主要步骤：加载、链接、初始化。 加载（Loading） Java 将字节码数据从不同的数据源读取到 JVM 中， 并映射为 JVM 认可的数据结构(Class 对象)，这里的数据源可能是各种各样的形态，如 jar 文件、class 文件，甚至是网络数据源等;如果输入数据不是 ClassFile 的结构，则会抛 出 ClassFormatError。 加载阶段是用户参与的阶段，我们可以自定义类加载器，去实现自己的类加载过程。 链接（Linking） 验证(Verification) 这是虚拟机安全的重要保障，JVM 需要核验字节信息是符合 Java 虚拟机规范的，否则就被认为是 VerifyError，这样就防止了恶意信息或者不合规的 信息危害 JVM 的运行，验证阶段有可能触发更多 class 的加载。 准备(Preparation) 创建类或接口中的静态变量，并初始化静态变量的初始值。但这 里的“初始化”和下面的显式初始化阶段是有区别的，侧重点在于分配所需要的内存空 间，不会去执行更进一步的 JVM 指令。 解析(Resolution) 在这一步会将常量池中的符号引用(symbolic reference)替换 为直接引用。在Java 虚拟机规范中，详细介绍了类、接口、方法和字段等各个方面的解析。 初始化（Initialization） 这一步真正去执行类初始化的代码逻辑，包括静态字 段赋值的动作，以及执行类定义中的静态初始化块内的逻辑，编译器在编译阶段就会把这部 分逻辑整理好，父类型的初始化逻辑优先于当前类型的逻辑。 简单说就是当类加载器(Class-Loader)试图加载某个类型的时 候，除非父加载器找不到相应类型，否则尽量将这个任务代理给当前加载器的父加载器去 做。使用委派模型的目的是避免重复加载 Java 类型。 类加载器分类 Bootstrap Classloader 启动类加载器它主要负责加载JDK内部类，通常是位于$JAVA_HOME/jre/lib目录中的rt.jar和其他核心库。 启动类加载器充当所有其他ClassLoader实例的父实例。 启动类加载器是核心JVM的一部分，并且是用本机代码编写的。 Extension Classloader 扩展类加载器是启动类加载器的子类，负责加载标准核心Java类的扩展，以便平台上运行的所有应用程序都可以使用它们。 从JDK扩展目录加载，通常是$JAVA_HOME/lib/ext目录，或在java.ext.dirs系统属性中提到的任何其他目录。 Application Classloader(aka System Classloader) 应用程序类加载器负责将所有应用程序级别的类加载到JVM中。它加载在类路径环境变量、-classpath或-cp命令行选项中找到的文件。 它是Extension Classloader的子类。 Custom Classloader 自定义类加载器，大多数情况，内置的类加载器就足够了，部分场景需要用到自定义类加载器 帮助修改现有的字节码，例如编织代理 动态创建适合用户需求的类，例如在JDBC中，不同驱动程序实现之间的切换是通过动态类加载完成的。 实现类版本控制机制，同时为具有相同名称和包的类加载不同的字节码。这可以通过URL类加载器(通过URL加载JAR)或定制类加载器来完成。 打印不同的类加载器 import org.openjsse.legacy8ujsse.net.ssl.Legacy8uJSSE; import java.util.ArrayList; public class Scratch { public static void main(String[] args) { // Application Classloader System.out.println(\"Classloader of this class:\" + Scratch.class.getClassLoader()); // Extension Classloader System.out.println(\"Classloader of Legacy8uJSSE:\" + Legacy8uJSSE.class.getClassLoader()); // Bootstrap Classloader // print null, because is written in native code, not Java, so it doesn't show up as a Java class System.out.println(\"Classloader of ArrayList:\" + ArrayList.class.getClassLoader()); } } public class Scratch { public static void main(String[] args) { load(); } public static void load() { User u = new User(); u.getId(); } }","title":"JVM","component":"interview","version":"","name":"jvm","url":"/interview/java/jvm.html","titles":[{"text":"JDK vs JRE vs JVM vs JIT","hash":"jdk-vs-jre-vs-jvm-vs-jit","id":1},{"text":"一个 .java 文件的运行过程","hash":"一个-java-文件的运行过程","id":2},{"text":"JVM 组成","hash":"jvm-组成","id":3},{"text":"类加载过程","hash":"类加载过程","id":4},{"text":"双亲委派机制","hash":"双亲委派机制","id":5},{"text":"类加载器","hash":"类加载器","id":6},{"text":"加载一个 .java 文件","hash":"加载一个-java-文件","id":7}]},"4":{"id":4,"text":"","title":"RocketMQ","component":"interview","version":"","name":"index","url":"/interview/mq/index.html","titles":[]},"5":{"id":5,"text":"列上计算(有函数) like 左% 联合索引顺序不对 MySQL自己选错了 force index 避免使用select 用union all代替union 小表驱动大表 批量操作 多用limit in中值太多 增量查询 高效的分页 用连接查询代替子查询 join的表不宜过多 join时要注意 控制索引的数量 选择合理的字段类型 提升group by的效率 索引优化 read more","title":"索引","component":"interview","version":"","name":"index","url":"/interview/mysql/index.html","titles":[{"text":"索引失效","hash":"索引失效","id":1},{"text":"SQL优化","hash":"sql优化","id":2}]},"6":{"id":6,"text":"String List Set ZSet Hash 引用知乎上一个高赞的回答来解释什么是I/O多路复用。假设你是一个老师，让30个学生解答一道题目，然后检查学生做的是否正确，你有下面几个选择： 第一种选择：按顺序逐个检查，先检查A，然后是B，之后是C、D。。。这中间如果有一个学生卡住，全班都会被耽误。这种模式就好比，你用循环挨个处理socket，根本不具有并发能力。 第二种选择：你创建30个分身，每个分身检查一个学生的答案是否正确。 这种类似于为每一个用户创建一个进程或者- 线程处理连接。 第三种选择，你站在讲台上等，谁解答完谁举手。这时C、D举手，表示他们解答问题完毕，你下去依次检查C、D的答案，然后继续回到讲台上等。此时E、A又举手，然后去处理E和A。 第一种就是阻塞IO模型，第三种就是I/O复用模型。 Redis 共有三种数据持久化的方式： AOF 日志：每执行一条写操作命令，就把该命令以追加的方式写入到一个文件里； RDB 快照：将某一时刻的内存数据，以二进制的方式写入磁盘； 混合持久化方式：Redis 4.0 新增的方式，集成了 AOF 和 RBD 的优点； Redis 在执行完一条写操作命令后，就会把该命令以追加的方式写入到一个文件里，然后 Redis 重启时，会读取该文件记录的命令，然后逐一执行命令的方式来进行数据恢复。 AOF日志记录的是操作命令，不是实际的数据，所以用 AOF 方法做故障恢复时，需要全量把日志都执行一遍，一旦 AOF 日志非常多，势必会造成 Redis 的恢复操作缓慢。 RDB 快照就是记录某一个瞬间的内存数据，记录的是实际数据。 Redis 的快照是全量快照，也就是说每次执行快照，都是把内存中的「所有数据」都记录到磁盘中。 Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave，他们的区别就在于是否在「主线程」里执行： 执行了 save 命令，就会在主线程生成 RDB 文件，由于和执行操作命令在同一个线程，所以如果写入 RDB 文件的时间太长，会阻塞主线程； 执行了 bgsave 命令，会创建一个子进程来生成 RDB 文件，这样可以避免主线程的阻塞； 当开启了混合持久化时，在 AOF 重写日志时，fork 出来的重写子进程会先将与主线程共享的内存数据以 RDB 方式写入到 AOF 文件，然后主线程处理的操作命令会被记录在重写缓冲区里，重写缓冲区里的增量命令会以 AOF 方式写入到 AOF 文件，写入完成后通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。 也就是说，使用了混合持久化，AOF 文件的前半部分是 RDB 格式的全量数据，后半部分是 AOF 格式的增量数据。 混合持久化优点： 混合持久化结合了 RDB 和 AOF 持久化的优点，开头为 RDB 的格式，使得 Redis 可以更快的启动，同时结合 AOF 的优点，有减低了大量数据丢失的风险。 混合持久化缺点： AOF 文件中添加了 RDB 格式的内容，使得 AOF 文件的可读性变得很差； 兼容性差，如果开启混合持久化，那么此混合持久化 AOF 文件，就不能用在 Redis 4.0 之前版本了。 每当我们对一个 key 设置了过期时间时，Redis 会把该 key 带上过期时间存储到一个过期字典（expires dict）中，也就是说「过期字典」保存了数据库中所有 key 的过期时间。 惰性删除策略 （访问时删） 不主动删除过期键，每次从数据库访问 key 时，都检测 key 是否过期，如果过期则删除该 key。 定期删除策略（定时随机删） 每隔一段时间「随机」从数据库中取出一定数量的 key 进行检查，并删除其中的过期key。 默认每秒进行 10 次过期检查一次数据库，随机选择 20 个 key 判断是否过期。。 Redis 内存淘汰策略共有八种，这八种策略大体分为「不进行数据淘汰」和「进行数据淘汰」两类策略。 noeviction（Redis3.0之后，默认的内存淘汰策略） ：它表示当运行内存超过最大设置内存时，不淘汰任何数据，这时如果有新的数据写入，则会触发 OOM，但是如果没用数据写入的话，只是单纯的查询或者删除操作的话，还是可以正常工作。 针对「进行数据淘汰」这一类策略，又可以细分为「在设置了过期时间的数据中进行淘汰」和「在所有数据范围内进行淘汰」这两类策略。 在设置了过期时间的数据中进行淘汰： volatile-random：随机淘汰设置了过期时间的任意键值； volatile-ttl：优先淘汰更早过期的键值。 volatile-lru（Redis3.0 之前，默认的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最久未使用的键值； volatile-lfu（Redis 4.0 后新增的内存淘汰策略）：淘汰所有设置了过期时间的键值中，最少使用的键值； 在所有数据范围内进行淘汰： allkeys-random：随机淘汰任意键值; allkeys-lru：淘汰整个键值中最久未使用的键值； allkeys-lfu（Redis 4.0 后新增的内存淘汰策略）：淘汰整个键值中最少使用的键值 缓存击穿 一个并发访问量比较大的key在某个时间过期，导致所有的请求直接打在DB上。 解决⽅案： 加锁更新，⽐如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写⼊缓存，再返回给⽤户，这样后⾯的请求就可以从缓存中拿到数据了。 缓存穿透 缓存穿透指的查询缓存和数据库中都不存在的数据，这样每次请求直接打到数据库，就好像缓存不存在一样 缓存穿透可能有两种原因： 自身业务代码问题 恶意攻击，爬虫造成空命中 它主要有两种解决办法： 缓存空值/默认值 一种方式是在数据库不命中之后，把一个空对象或者默认值保存到缓存，之后再访问这个数据，就会从缓存中获取，这样就保护了数据库。 需要更多的内存空间（如果是攻击，问题更严重） 缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。 布隆过滤器 除了缓存空对象，我们还可以在存储和缓存之前，加一个布隆过滤器，做一层过滤。 布隆过滤器里会保存数据是否存在，如果判断数据不不能再，就不会访问存储。 缓存雪崩 某⼀时刻发⽣⼤规模的缓存失效的情况，例如缓存服务宕机、大量key在同一时间过期，这样的后果就是⼤量的请求进来直接打到DB上，可能导致整个系统的崩溃，称为雪崩。 解决⽅案： 提高缓存可用性 集群部署：通过集群来提升缓存的可用性，可以利用Redis本身的Redis Cluster或者第三方集群方案如Codis等。 多级缓存：设置多级缓存，第一级缓存失效的基础上，访问二级缓存，每一级缓存的失效时间都不同。 过期时间 均匀过期：为了避免大量的缓存在同一时间过期，可以把不同的 key 过期时间随机生成，避免过期时间太过集中。 热点数据永不过期。 熔断降级 服务熔断：当缓存服务器宕机或超时响应时，为了防止整个系统出现雪崩，暂时停止业务服务访问缓存系统。 服务降级：当出现大量缓存失效，而且处在高并发高负荷的情况下，在业务系统内部暂时舍弃对一些非核心的接口和数据的请求，而直接返回一个提前准备好的 fallback（退路）错误处理信息。","title":"Redis","component":"interview","version":"","name":"index","url":"/interview/redis/index.html","titles":[{"text":"数据结构","hash":"数据结构","id":1},{"text":"I/O多路复用","hash":"io多路复用","id":2},{"text":"持久化","hash":"持久化","id":3},{"text":"AOF","hash":"aof","id":4},{"text":"RDB","hash":"rdb","id":5},{"text":"混合持久化方式","hash":"混合持久化方式","id":6},{"text":"过期删除与内存淘汰","hash":"过期删除与内存淘汰","id":7},{"text":"Redis 内存淘汰策略有哪些？","hash":"redis-内存淘汰策略有哪些","id":8},{"text":"不进行数据淘汰的策略","hash":"不进行数据淘汰的策略","id":9},{"text":"进行数据淘汰的策略","hash":"进行数据淘汰的策略","id":10},{"text":"缓存设计","hash":"缓存设计","id":11},{"text":"什么是缓存击穿、缓存穿透、缓存雪崩？","hash":"什么是缓存击穿缓存穿透缓存雪崩","id":12}]},"7":{"id":7,"text":"","title":"AOP","component":"interview","version":"","name":"aop","url":"/interview/spring/aop.html","titles":[]},"8":{"id":8,"text":"Ioc(Inversion of Control) 控制反转，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。 DI(Dependency Injection) 依赖注入，组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。 IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。 控制反转是通过依赖注入实现的，其实它们是同一个概念的不同角度描述。通俗来说就是IoC是设计思想，DI是实现方式。 @Autowired是Spring自带的，@Resource是JSR250规范实现的，@Inject是JSR330规范实现的 @Autowired、@Inject用法基本一样，不同的是@Inject没有required属性 @Autowired、@Inject是默认按照类型匹配的，@Resource是按照名称匹配的 @Autowired如果需要按照名称匹配需要和@Qualifier一起使用，@Inject和@Named一起使用，@Resource则通过name进行指定","title":"IOC and DI","component":"interview","version":"","name":"ioc","url":"/interview/spring/ioc.html","titles":[{"text":"@Autowired vs @Resource vs @Inject","hash":"autowired-vs-resource-vs-inject","id":1}]},"9":{"id":9,"text":"","title":"Spring Boot 启动流程","component":"interview","version":"","name":"spring-boot-start","url":"/interview/spring/spring-boot-start.html","titles":[]}},"components":{},"componentVersions":{"interview/":{"displayVersion":"default","title":"Interview","version":"","name":"interview","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlightjs-ext","site-title":"Implicated","site-url":"https://docs.implicated.com","experimental":"","page-pagination":"","idprefix":"","idseparator":"-","kroki-fetch-diagram":true},"sourcemap":false,"extensions":[{},{"VERSION":"0.4.0"}]},"url":"/interview/index.html","navigation":[{"items":[{"content":"Java","items":[{"content":"并发"},{"content":"JVM","url":"/interview/java/jvm.html","urlType":"internal"}]},{"content":"Spring","items":[{"content":"IOC and DI","url":"/interview/spring/ioc.html","urlType":"internal"},{"content":"AOP","url":"/interview/spring/aop.html","urlType":"internal"}]},{"content":"Spring Boot","items":[{"content":"Spring Boot 启动流程","url":"/interview/spring/spring-boot-start.html","urlType":"internal"}]},{"content":"MySQL","items":[{"content":"索引","url":"/interview/mysql/index.html","urlType":"internal"}]},{"content":"中间件","items":[{"content":"Redis","url":"/interview/redis/index.html","urlType":"internal"},{"content":"ElasticSearch","url":"/interview/elastic/index.html","urlType":"internal"},{"content":"RocketMQ","url":"/interview/mq/index.html","urlType":"internal"}]},{"content":"容器","items":[{"content":"docker"},{"content":"k8s"}]}],"root":true,"order":0}]}}}})